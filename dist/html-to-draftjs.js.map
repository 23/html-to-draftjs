{"version":3,"sources":["webpack:///html-to-draftjs.js","webpack:///webpack/bootstrap 6cd70b34eac65c81e7a0","webpack:///./~/immutable/dist/immutable.js","webpack:///external \"draft-js\"","webpack:///./src/library/chunkBuilder.js","webpack:///./src/library/getBlockData.js","webpack:///./src/library/getBlockTypeForTag.js","webpack:///./src/library/getEntityId.js","webpack:///./src/library/getSafeBodyFromHTML.js","webpack:///./src/library/index.js","webpack:///./src/library/processInlineTag.js"],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","_typeof","Symbol","iterator","obj","constructor","prototype","global","factory","undefined","createClass","ctor","superClass","Object","create","Iterable","value","isIterable","Seq","KeyedIterable","isKeyed","KeyedSeq","IndexedIterable","isIndexed","IndexedSeq","SetIterable","isAssociative","SetSeq","maybeIterable","IS_ITERABLE_SENTINEL","maybeKeyed","IS_KEYED_SENTINEL","maybeIndexed","IS_INDEXED_SENTINEL","maybeAssociative","isOrdered","maybeOrdered","IS_ORDERED_SENTINEL","MakeRef","ref","SetRef","OwnerID","arrCopy","arr","offset","len","Math","max","length","newArr","Array","ii","ensureSize","iter","size","__iterate","returnTrue","wrapIndex","index","uint32Index","NaN","wholeSlice","begin","end","resolveBegin","resolveIndex","resolveEnd","defaultIndex","min","Iterator","next","this","iteratorValue","type","k","v","iteratorResult","done","iteratorDone","hasIterator","getIteratorFn","isIterator","maybeIterator","getIterator","iterable","iteratorFn","REAL_ITERATOR_SYMBOL","FAUX_ITERATOR_SYMBOL","isArrayLike","emptySequence","toSeq","seqFromValue","toKeyedSeq","fromEntrySeq","keyedSeqFromValue","entrySeq","toIndexedSeq","indexedSeqFromValue","toSetSeq","ArraySeq","array","_array","ObjectSeq","object","keys","_object","_keys","IterableSeq","_iterable","IteratorSeq","_iterator","_iteratorCache","isSeq","maybeSeq","IS_SEQ_SENTINEL","EMPTY_SEQ","seq","isArray","TypeError","maybeIndexedSeqFromValue","seqIterate","fn","reverse","useKeys","cache","_cache","maxIndex","entry","__iterateUncached","seqIterator","__iteratorUncached","fromJS","json","converter","fromJSWith","","fromJSDefault","key","parentJSON","map","isPlainObj","toList","toMap","is","valueA","valueB","valueOf","equals","deepEqual","a","b","__hash","notAssociative","entries","every","flipped","cacheResult","_","allEqual","bSize","has","get","NOT_SET","Repeat","times","_value","Infinity","EMPTY_REPEAT","invariant","condition","error","Error","Range","start","step","abs","_start","_end","_step","ceil","EMPTY_RANGE","Collection","KeyedCollection","IndexedCollection","SetCollection","smi","i32","hash","o","h","STRING_HASH_CACHE_MIN_STRLEN","cachedHashString","hashString","hashCode","hashJSObj","toString","string","stringHashCache","STRING_HASH_CACHE_SIZE","STRING_HASH_CACHE_MAX_SIZE","charCodeAt","usingWeakMap","weakMap","UID_HASH_KEY","canDefineProperty","propertyIsEnumerable","getIENodeHash","objHashUID","set","isExtensible","defineProperty","enumerable","configurable","writable","apply","arguments","nodeType","node","uniqueID","documentElement","assertNotInfinite","Map","emptyMap","isMap","withMutations","forEach","maybeMap","IS_MAP_SENTINEL","ArrayMapNode","ownerID","BitmapIndexedNode","bitmap","nodes","HashArrayMapNode","count","HashCollisionNode","keyHash","ValueNode","MapIterator","_type","_reverse","_stack","_root","mapIteratorFrame","mapIteratorValue","prev","__prev","makeMap","root","MapPrototype","__ownerID","__altered","EMPTY_MAP","updateMap","newRoot","newSize","didChangeSize","CHANGE_LENGTH","didAlter","DID_ALTER","updateNode","shift","update","isLeafNode","mergeIntoNode","newNode","idx1","MASK","idx2","SHIFT","createNodes","packNodes","excluding","packedII","packedNodes","bit","expandNodes","including","expandedNodes","SIZE","mergeIntoMapWith","merger","iterables","iters","push","mergeIntoCollectionWith","deepMerger","existing","mergeDeep","deepMergerWith","mergeDeepWith","nextValue","collection","filter","x","mergeIntoMap","updateInDeepMap","keyPathIter","notSetValue","updater","isNotSet","existingValue","newValue","nextExisting","nextUpdated","remove","popCount","setIn","idx","val","canEdit","newArray","spliceIn","newLen","after","spliceOut","pop","List","empty","emptyList","isList","makeList","VNode","toArray","list","setSize","i","maybeList","IS_LIST_SENTINEL","iterateList","iterateNodeOrLeaf","level","iterateLeaf","iterateNode","tailPos","tail","from","left","to","right","DONE","values","_origin","_capacity","getTailOffset","_tail","_level","origin","capacity","ListPrototype","EMPTY_LIST","updateList","setListBounds","newTail","updateVNode","nodeHas","lowerNode","newLowerNode","editableVNode","slice","listNodeFor","rawIndex","owner","oldOrigin","oldCapacity","newOrigin","newCapacity","clear","newLevel","offsetShift","oldTailOffset","newTailOffset","oldTail","removeAfter","removeBefore","beginIndex","mergeIntoListWith","maxSize","OrderedMap","emptyOrderedMap","isOrderedMap","maybeOrderedMap","makeOrderedMap","omap","_map","_list","EMPTY_ORDERED_MAP","updateOrderedMap","newMap","newList","flip","ToKeyedSequence","indexed","_iter","_useKeys","ToIndexedSequence","ToSetSequence","FromEntriesSequence","flipFactory","flipSequence","makeSequence","reversedSequence","includes","cacheResultThrough","this$0","ITERATE_ENTRIES","__iterator","ITERATE_VALUES","ITERATE_KEYS","mapFactory","mapper","context","mappedSequence","reverseFactory","filterFactory","predicate","filterSequence","iterations","countByFactory","grouper","groups","asMutable","asImmutable","groupByFactory","isKeyedIter","coerce","iterableClass","reify","sliceFactory","originalSize","resolvedBegin","resolvedEnd","sliceSize","resolvedSize","sliceSeq","skipped","isSkipping","takeWhileFactory","takeSequence","iterating","skipWhileFactory","skipSequence","skipping","concatFactory","isKeyedIterable","concat","singleton","concatSeq","flatten","reduce","sum","flattenFactory","depth","flatSequence","flatDeep","currentDepth","stopped","stack","flatMapFactory","interposeFactory","separator","interposedSequence","sortFactory","comparator","defaultComparator","sort","maxFactory","maxCompare","comp","zipWithFactory","keyIter","zipper","zipSequence","iterators","isDone","steps","some","s","validateEntry","resolveSize","forceIterator","keyPath","Record","defaultValues","name","hasInitialized","RecordType","setProps","RecordTypePrototype","_name","_defaultValues","RecordPrototype","makeRecord","likeRecord","record","getPrototypeOf","recordName","names","setProp","bind","Set","emptySet","isSet","add","maybeSet","IS_SET_SENTINEL","updateSet","__empty","__make","makeSet","SetPrototype","EMPTY_SET","OrderedSet","emptyOrderedSet","isOrderedSet","maybeOrderedSet","makeOrderedSet","OrderedSetPrototype","EMPTY_ORDERED_SET","Stack","emptyStack","isStack","unshiftAll","maybeStack","IS_STACK_SENTINEL","makeStack","head","StackPrototype","_head","EMPTY_STACK","mixin","methods","keyCopier","getOwnPropertySymbols","keyMapper","entryMapper","not","neg","quoteString","JSON","stringify","String","defaultZipper","defaultNegComparator","hashIterable","ordered","keyed","hashMerge","murmurHashOfSize","imul","SLICE$0","Keyed","Indexed","DELETE","ITERATOR_SYMBOL","KEYS","VALUES","ENTRIES","inspect","toSource","of","__toString","hasOwnProperty","searchValue","indexOf","lastIndexOf","other","possibleIndex","floor","offsetValue","d","e","WeakMap","keyValues","updateIn","deleteIn","updatedValue","merge","mergeWith","mergeIn","mergeDeepIn","sortBy","mutable","wasAltered","__ensureOwner","iterate","removeIn","removed","exists","MAX_ARRAY_MAP_SIZE","isEditable","newEntries","keyHashFrag","MAX_BITMAP_INDEXED_SIZE","newBitmap","newNodes","newCount","MIN_HASH_ARRAY_MAP_SIZE","keyMatch","subNode","splice","insert","oldSize","unshift","originIndex","newChild","removingFirst","oldChild","editable","sizeIndex","valueSeq","indexedIterable","defaultVal","_empty","fromKeys","keySeq","union","intersect","originalSet","subtract","peek","pushAll","toJS","__toJS","toJSON","toObject","toOrderedMap","toOrderedSet","toSet","toStack","__toStringMapper","join","returnValue","find","findEntry","sideEffect","joined","isFirst","reducer","initialReduction","reduction","useFirst","reduceRight","reversed","butLast","isEmpty","countBy","entriesSequence","filterNot","found","findKey","findLast","findLastEntry","findLastKey","first","flatMap","searchKey","getIn","searchKeyPath","nested","groupBy","hasIn","isSubset","isSuperset","keyOf","last","lastKeyOf","maxBy","minBy","rest","skip","amount","skipLast","skipWhile","skipUntil","take","takeLast","takeWhile","takeUntil","IterablePrototype","chain","contains","mapEntries","mapKeys","KeyedIterablePrototype","findIndex","removeNum","numArgs","spliced","findLastIndex","interpose","interleave","zipped","interleaved","zip","zipWith","Immutable","require","_immutable","SPACE","MAX_DEPTH","getWhitespaceChunk","entityId","text","inlines","entities","blocks","createTextChunk","inlineStyle","textContent","trim","chunk","fill","getSoftNewlineChunk","getEmptyChunk","getFirstBlockChunk","blockType","data","getBlockDividerChunk","getAtomicBlockChunk","joinChunks","A","B","getBlockData","style","textAlign","text-align","default","getBlockTypeForTag","tag","lastList","matchedTypes","blockRenderMap","draftBlock","element","wrapper","header-one","header-two","header-three","header-four","header-five","header-six","unordered-list-item","ordered-list-item","blockquote","atomic","unstyled","_draftJs","getEntityId","HTMLAnchorElement","entityConfig","dataset","mention","url","href","innerHTML","Entity","title","getSafeBodyFromHTML","html","doc","document","implementation","createHTMLDocument","getElementsByTagName","_interopRequireDefault","__esModule","genFragment","inEntity","nodeName","toLowerCase","_chunkBuilder","HTMLImageElement","src","height","width","HTMLIFrameElement","_getBlockTypeForTag2","firstBlock","_getBlockData2","_processInlineTag2","child","firstChild","_getEntityId2","_genFragment","generatedChunk","sibling","nextSibling","getChunkForHTML","sanitizedHtml","replace","REGEX_NBSP","safeBody","_getSafeBodyFromHTML2","_genFragment2","htmlToDraft","chunkData","_ret","entityMap","contentBlocks","split","textBlock","characterList","entity","CharacterMetadata","ContentBlock","genKey","_getSafeBodyFromHTML","_getBlockTypeForTag","_processInlineTag","_getBlockData","_getEntityId","RegExp","processInlineTag","currentStyle","styleToCheck","inlineTags","HTMLElement","htmlElement","color","backgroundColor","fontSize","fontFamily","substr","code","del","em","strong","ins","sub","sup"],"mappings":"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","file":"html-to-draftjs.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(8);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\t/**\n\t *  Copyright (c) 2014-2015, Facebook, Inc.\n\t *  All rights reserved.\n\t *\n\t *  This source code is licensed under the BSD-style license found in the\n\t *  LICENSE file in the root directory of this source tree. An additional grant\n\t *  of patent rights can be found in the PATENTS file in the same directory.\n\t */\n\t\n\t(function (global, factory) {\n\t  ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : global.Immutable = factory();\n\t})(undefined, function () {\n\t  'use strict';\n\t  var SLICE$0 = Array.prototype.slice;\n\t\n\t  function createClass(ctor, superClass) {\n\t    if (superClass) {\n\t      ctor.prototype = Object.create(superClass.prototype);\n\t    }\n\t    ctor.prototype.constructor = ctor;\n\t  }\n\t\n\t  function Iterable(value) {\n\t    return isIterable(value) ? value : Seq(value);\n\t  }\n\t\n\t  createClass(KeyedIterable, Iterable);\n\t  function KeyedIterable(value) {\n\t    return isKeyed(value) ? value : KeyedSeq(value);\n\t  }\n\t\n\t  createClass(IndexedIterable, Iterable);\n\t  function IndexedIterable(value) {\n\t    return isIndexed(value) ? value : IndexedSeq(value);\n\t  }\n\t\n\t  createClass(SetIterable, Iterable);\n\t  function SetIterable(value) {\n\t    return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n\t  }\n\t\n\t  function isIterable(maybeIterable) {\n\t    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n\t  }\n\t\n\t  function isKeyed(maybeKeyed) {\n\t    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n\t  }\n\t\n\t  function isIndexed(maybeIndexed) {\n\t    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n\t  }\n\t\n\t  function isAssociative(maybeAssociative) {\n\t    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n\t  }\n\t\n\t  function isOrdered(maybeOrdered) {\n\t    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n\t  }\n\t\n\t  Iterable.isIterable = isIterable;\n\t  Iterable.isKeyed = isKeyed;\n\t  Iterable.isIndexed = isIndexed;\n\t  Iterable.isAssociative = isAssociative;\n\t  Iterable.isOrdered = isOrdered;\n\t\n\t  Iterable.Keyed = KeyedIterable;\n\t  Iterable.Indexed = IndexedIterable;\n\t  Iterable.Set = SetIterable;\n\t\n\t  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  // Used for setting prototype methods that IE8 chokes on.\n\t  var DELETE = 'delete';\n\t\n\t  // Constants describing the size of trie nodes.\n\t  var SHIFT = 5; // Resulted in best performance after ______?\n\t  var SIZE = 1 << SHIFT;\n\t  var MASK = SIZE - 1;\n\t\n\t  // A consistent shared value representing \"not set\" which equals nothing other\n\t  // than itself, and nothing that could be provided externally.\n\t  var NOT_SET = {};\n\t\n\t  // Boolean references, Rough equivalent of `bool &`.\n\t  var CHANGE_LENGTH = { value: false };\n\t  var DID_ALTER = { value: false };\n\t\n\t  function MakeRef(ref) {\n\t    ref.value = false;\n\t    return ref;\n\t  }\n\t\n\t  function SetRef(ref) {\n\t    ref && (ref.value = true);\n\t  }\n\t\n\t  // A function which returns a value representing an \"owner\" for transient writes\n\t  // to tries. The return value will only ever equal itself, and will not equal\n\t  // the return of any subsequent call of this function.\n\t  function OwnerID() {}\n\t\n\t  // http://jsperf.com/copy-array-inline\n\t  function arrCopy(arr, offset) {\n\t    offset = offset || 0;\n\t    var len = Math.max(0, arr.length - offset);\n\t    var newArr = new Array(len);\n\t    for (var ii = 0; ii < len; ii++) {\n\t      newArr[ii] = arr[ii + offset];\n\t    }\n\t    return newArr;\n\t  }\n\t\n\t  function ensureSize(iter) {\n\t    if (iter.size === undefined) {\n\t      iter.size = iter.__iterate(returnTrue);\n\t    }\n\t    return iter.size;\n\t  }\n\t\n\t  function wrapIndex(iter, index) {\n\t    // This implements \"is array index\" which the ECMAString spec defines as:\n\t    //\n\t    //     A String property name P is an array index if and only if\n\t    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n\t    //     to 2^32−1.\n\t    //\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n\t    if (typeof index !== 'number') {\n\t      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n\t      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n\t        return NaN;\n\t      }\n\t      index = uint32Index;\n\t    }\n\t    return index < 0 ? ensureSize(iter) + index : index;\n\t  }\n\t\n\t  function returnTrue() {\n\t    return true;\n\t  }\n\t\n\t  function wholeSlice(begin, end, size) {\n\t    return (begin === 0 || size !== undefined && begin <= -size) && (end === undefined || size !== undefined && end >= size);\n\t  }\n\t\n\t  function resolveBegin(begin, size) {\n\t    return resolveIndex(begin, size, 0);\n\t  }\n\t\n\t  function resolveEnd(end, size) {\n\t    return resolveIndex(end, size, size);\n\t  }\n\t\n\t  function resolveIndex(index, size, defaultIndex) {\n\t    return index === undefined ? defaultIndex : index < 0 ? Math.max(0, size + index) : size === undefined ? index : Math.min(size, index);\n\t  }\n\t\n\t  /* global Symbol */\n\t\n\t  var ITERATE_KEYS = 0;\n\t  var ITERATE_VALUES = 1;\n\t  var ITERATE_ENTRIES = 2;\n\t\n\t  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n\t  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\t\n\t  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\t\n\t  function Iterator(next) {\n\t    this.next = next;\n\t  }\n\t\n\t  Iterator.prototype.toString = function () {\n\t    return '[Iterator]';\n\t  };\n\t\n\t  Iterator.KEYS = ITERATE_KEYS;\n\t  Iterator.VALUES = ITERATE_VALUES;\n\t  Iterator.ENTRIES = ITERATE_ENTRIES;\n\t\n\t  Iterator.prototype.inspect = Iterator.prototype.toSource = function () {\n\t    return this.toString();\n\t  };\n\t  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n\t    return this;\n\t  };\n\t\n\t  function iteratorValue(type, k, v, iteratorResult) {\n\t    var value = type === 0 ? k : type === 1 ? v : [k, v];\n\t    iteratorResult ? iteratorResult.value = value : iteratorResult = {\n\t      value: value, done: false\n\t    };\n\t    return iteratorResult;\n\t  }\n\t\n\t  function iteratorDone() {\n\t    return { value: undefined, done: true };\n\t  }\n\t\n\t  function hasIterator(maybeIterable) {\n\t    return !!getIteratorFn(maybeIterable);\n\t  }\n\t\n\t  function isIterator(maybeIterator) {\n\t    return maybeIterator && typeof maybeIterator.next === 'function';\n\t  }\n\t\n\t  function getIterator(iterable) {\n\t    var iteratorFn = getIteratorFn(iterable);\n\t    return iteratorFn && iteratorFn.call(iterable);\n\t  }\n\t\n\t  function getIteratorFn(iterable) {\n\t    var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);\n\t    if (typeof iteratorFn === 'function') {\n\t      return iteratorFn;\n\t    }\n\t  }\n\t\n\t  function isArrayLike(value) {\n\t    return value && typeof value.length === 'number';\n\t  }\n\t\n\t  createClass(Seq, Iterable);\n\t  function Seq(value) {\n\t    return value === null || value === undefined ? emptySequence() : isIterable(value) ? value.toSeq() : seqFromValue(value);\n\t  }\n\t\n\t  Seq.of = function () /*...values*/{\n\t    return Seq(arguments);\n\t  };\n\t\n\t  Seq.prototype.toSeq = function () {\n\t    return this;\n\t  };\n\t\n\t  Seq.prototype.toString = function () {\n\t    return this.__toString('Seq {', '}');\n\t  };\n\t\n\t  Seq.prototype.cacheResult = function () {\n\t    if (!this._cache && this.__iterateUncached) {\n\t      this._cache = this.entrySeq().toArray();\n\t      this.size = this._cache.length;\n\t    }\n\t    return this;\n\t  };\n\t\n\t  // abstract __iterateUncached(fn, reverse)\n\t\n\t  Seq.prototype.__iterate = function (fn, reverse) {\n\t    return seqIterate(this, fn, reverse, true);\n\t  };\n\t\n\t  // abstract __iteratorUncached(type, reverse)\n\t\n\t  Seq.prototype.__iterator = function (type, reverse) {\n\t    return seqIterator(this, type, reverse, true);\n\t  };\n\t\n\t  createClass(KeyedSeq, Seq);\n\t  function KeyedSeq(value) {\n\t    return value === null || value === undefined ? emptySequence().toKeyedSeq() : isIterable(value) ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq() : keyedSeqFromValue(value);\n\t  }\n\t\n\t  KeyedSeq.prototype.toKeyedSeq = function () {\n\t    return this;\n\t  };\n\t\n\t  createClass(IndexedSeq, Seq);\n\t  function IndexedSeq(value) {\n\t    return value === null || value === undefined ? emptySequence() : !isIterable(value) ? indexedSeqFromValue(value) : isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n\t  }\n\t\n\t  IndexedSeq.of = function () /*...values*/{\n\t    return IndexedSeq(arguments);\n\t  };\n\t\n\t  IndexedSeq.prototype.toIndexedSeq = function () {\n\t    return this;\n\t  };\n\t\n\t  IndexedSeq.prototype.toString = function () {\n\t    return this.__toString('Seq [', ']');\n\t  };\n\t\n\t  IndexedSeq.prototype.__iterate = function (fn, reverse) {\n\t    return seqIterate(this, fn, reverse, false);\n\t  };\n\t\n\t  IndexedSeq.prototype.__iterator = function (type, reverse) {\n\t    return seqIterator(this, type, reverse, false);\n\t  };\n\t\n\t  createClass(SetSeq, Seq);\n\t  function SetSeq(value) {\n\t    return (value === null || value === undefined ? emptySequence() : !isIterable(value) ? indexedSeqFromValue(value) : isKeyed(value) ? value.entrySeq() : value).toSetSeq();\n\t  }\n\t\n\t  SetSeq.of = function () /*...values*/{\n\t    return SetSeq(arguments);\n\t  };\n\t\n\t  SetSeq.prototype.toSetSeq = function () {\n\t    return this;\n\t  };\n\t\n\t  Seq.isSeq = isSeq;\n\t  Seq.Keyed = KeyedSeq;\n\t  Seq.Set = SetSeq;\n\t  Seq.Indexed = IndexedSeq;\n\t\n\t  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\t\n\t  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\t\n\t  createClass(ArraySeq, IndexedSeq);\n\t  function ArraySeq(array) {\n\t    this._array = array;\n\t    this.size = array.length;\n\t  }\n\t\n\t  ArraySeq.prototype.get = function (index, notSetValue) {\n\t    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n\t  };\n\t\n\t  ArraySeq.prototype.__iterate = function (fn, reverse) {\n\t    var array = this._array;\n\t    var maxIndex = array.length - 1;\n\t    for (var ii = 0; ii <= maxIndex; ii++) {\n\t      if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n\t        return ii + 1;\n\t      }\n\t    }\n\t    return ii;\n\t  };\n\t\n\t  ArraySeq.prototype.__iterator = function (type, reverse) {\n\t    var array = this._array;\n\t    var maxIndex = array.length - 1;\n\t    var ii = 0;\n\t    return new Iterator(function () {\n\t      return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++]);\n\t    });\n\t  };\n\t\n\t  createClass(ObjectSeq, KeyedSeq);\n\t  function ObjectSeq(object) {\n\t    var keys = Object.keys(object);\n\t    this._object = object;\n\t    this._keys = keys;\n\t    this.size = keys.length;\n\t  }\n\t\n\t  ObjectSeq.prototype.get = function (key, notSetValue) {\n\t    if (notSetValue !== undefined && !this.has(key)) {\n\t      return notSetValue;\n\t    }\n\t    return this._object[key];\n\t  };\n\t\n\t  ObjectSeq.prototype.has = function (key) {\n\t    return this._object.hasOwnProperty(key);\n\t  };\n\t\n\t  ObjectSeq.prototype.__iterate = function (fn, reverse) {\n\t    var object = this._object;\n\t    var keys = this._keys;\n\t    var maxIndex = keys.length - 1;\n\t    for (var ii = 0; ii <= maxIndex; ii++) {\n\t      var key = keys[reverse ? maxIndex - ii : ii];\n\t      if (fn(object[key], key, this) === false) {\n\t        return ii + 1;\n\t      }\n\t    }\n\t    return ii;\n\t  };\n\t\n\t  ObjectSeq.prototype.__iterator = function (type, reverse) {\n\t    var object = this._object;\n\t    var keys = this._keys;\n\t    var maxIndex = keys.length - 1;\n\t    var ii = 0;\n\t    return new Iterator(function () {\n\t      var key = keys[reverse ? maxIndex - ii : ii];\n\t      return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, key, object[key]);\n\t    });\n\t  };\n\t\n\t  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t  createClass(IterableSeq, IndexedSeq);\n\t  function IterableSeq(iterable) {\n\t    this._iterable = iterable;\n\t    this.size = iterable.length || iterable.size;\n\t  }\n\t\n\t  IterableSeq.prototype.__iterateUncached = function (fn, reverse) {\n\t    if (reverse) {\n\t      return this.cacheResult().__iterate(fn, reverse);\n\t    }\n\t    var iterable = this._iterable;\n\t    var iterator = getIterator(iterable);\n\t    var iterations = 0;\n\t    if (isIterator(iterator)) {\n\t      var step;\n\t      while (!(step = iterator.next()).done) {\n\t        if (fn(step.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t    }\n\t    return iterations;\n\t  };\n\t\n\t  IterableSeq.prototype.__iteratorUncached = function (type, reverse) {\n\t    if (reverse) {\n\t      return this.cacheResult().__iterator(type, reverse);\n\t    }\n\t    var iterable = this._iterable;\n\t    var iterator = getIterator(iterable);\n\t    if (!isIterator(iterator)) {\n\t      return new Iterator(iteratorDone);\n\t    }\n\t    var iterations = 0;\n\t    return new Iterator(function () {\n\t      var step = iterator.next();\n\t      return step.done ? step : iteratorValue(type, iterations++, step.value);\n\t    });\n\t  };\n\t\n\t  createClass(IteratorSeq, IndexedSeq);\n\t  function IteratorSeq(iterator) {\n\t    this._iterator = iterator;\n\t    this._iteratorCache = [];\n\t  }\n\t\n\t  IteratorSeq.prototype.__iterateUncached = function (fn, reverse) {\n\t    if (reverse) {\n\t      return this.cacheResult().__iterate(fn, reverse);\n\t    }\n\t    var iterator = this._iterator;\n\t    var cache = this._iteratorCache;\n\t    var iterations = 0;\n\t    while (iterations < cache.length) {\n\t      if (fn(cache[iterations], iterations++, this) === false) {\n\t        return iterations;\n\t      }\n\t    }\n\t    var step;\n\t    while (!(step = iterator.next()).done) {\n\t      var val = step.value;\n\t      cache[iterations] = val;\n\t      if (fn(val, iterations++, this) === false) {\n\t        break;\n\t      }\n\t    }\n\t    return iterations;\n\t  };\n\t\n\t  IteratorSeq.prototype.__iteratorUncached = function (type, reverse) {\n\t    if (reverse) {\n\t      return this.cacheResult().__iterator(type, reverse);\n\t    }\n\t    var iterator = this._iterator;\n\t    var cache = this._iteratorCache;\n\t    var iterations = 0;\n\t    return new Iterator(function () {\n\t      if (iterations >= cache.length) {\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        cache[iterations] = step.value;\n\t      }\n\t      return iteratorValue(type, iterations, cache[iterations++]);\n\t    });\n\t  };\n\t\n\t  // # pragma Helper functions\n\t\n\t  function isSeq(maybeSeq) {\n\t    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n\t  }\n\t\n\t  var EMPTY_SEQ;\n\t\n\t  function emptySequence() {\n\t    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n\t  }\n\t\n\t  function keyedSeqFromValue(value) {\n\t    var seq = Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() : isIterator(value) ? new IteratorSeq(value).fromEntrySeq() : hasIterator(value) ? new IterableSeq(value).fromEntrySeq() : (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? new ObjectSeq(value) : undefined;\n\t    if (!seq) {\n\t      throw new TypeError('Expected Array or iterable object of [k, v] entries, ' + 'or keyed object: ' + value);\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function indexedSeqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value);\n\t    if (!seq) {\n\t      throw new TypeError('Expected Array or iterable object of values: ' + value);\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function seqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value) || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && new ObjectSeq(value);\n\t    if (!seq) {\n\t      throw new TypeError('Expected Array or iterable object of values, or keyed object: ' + value);\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function maybeIndexedSeqFromValue(value) {\n\t    return isArrayLike(value) ? new ArraySeq(value) : isIterator(value) ? new IteratorSeq(value) : hasIterator(value) ? new IterableSeq(value) : undefined;\n\t  }\n\t\n\t  function seqIterate(seq, fn, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    }\n\t    return seq.__iterateUncached(fn, reverse);\n\t  }\n\t\n\t  function seqIterator(seq, type, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function () {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n\t      });\n\t    }\n\t    return seq.__iteratorUncached(type, reverse);\n\t  }\n\t\n\t  function fromJS(json, converter) {\n\t    return converter ? fromJSWith(converter, json, '', { '': json }) : fromJSDefault(json);\n\t  }\n\t\n\t  function fromJSWith(converter, json, key, parentJSON) {\n\t    if (Array.isArray(json)) {\n\t      return converter.call(parentJSON, key, IndexedSeq(json).map(function (v, k) {\n\t        return fromJSWith(converter, v, k, json);\n\t      }));\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return converter.call(parentJSON, key, KeyedSeq(json).map(function (v, k) {\n\t        return fromJSWith(converter, v, k, json);\n\t      }));\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function fromJSDefault(json) {\n\t    if (Array.isArray(json)) {\n\t      return IndexedSeq(json).map(fromJSDefault).toList();\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return KeyedSeq(json).map(fromJSDefault).toMap();\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function isPlainObj(value) {\n\t    return value && (value.constructor === Object || value.constructor === undefined);\n\t  }\n\t\n\t  /**\n\t   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n\t   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n\t   *\n\t   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n\t   * value, which is different from the algorithm described by\n\t   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\t   *\n\t   * This is extended further to allow Objects to describe the values they\n\t   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n\t   *\n\t   * Note: because of this extension, the key equality of Immutable.Map and the\n\t   * value equality of Immutable.Set will differ from ES6 Map and Set.\n\t   *\n\t   * ### Defining custom values\n\t   *\n\t   * The easiest way to describe the value an object represents is by implementing\n\t   * `valueOf`. For example, `Date` represents a value by returning a unix\n\t   * timestamp for `valueOf`:\n\t   *\n\t   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n\t   *     var date2 = new Date(1234567890000);\n\t   *     date1.valueOf(); // 1234567890000\n\t   *     assert( date1 !== date2 );\n\t   *     assert( Immutable.is( date1, date2 ) );\n\t   *\n\t   * Note: overriding `valueOf` may have other implications if you use this object\n\t   * where JavaScript expects a primitive, such as implicit string coercion.\n\t   *\n\t   * For more complex types, especially collections, implementing `valueOf` may\n\t   * not be performant. An alternative is to implement `equals` and `hashCode`.\n\t   *\n\t   * `equals` takes another object, presumably of similar type, and returns true\n\t   * if the it is equal. Equality is symmetrical, so the same result should be\n\t   * returned if this and the argument are flipped.\n\t   *\n\t   *     assert( a.equals(b) === b.equals(a) );\n\t   *\n\t   * `hashCode` returns a 32bit integer number representing the object which will\n\t   * be used to determine how to store the value object in a Map or Set. You must\n\t   * provide both or neither methods, one must not exist without the other.\n\t   *\n\t   * Also, an important relationship between these methods must be upheld: if two\n\t   * values are equal, they *must* return the same hashCode. If the values are not\n\t   * equal, they might have the same hashCode; this is called a hash collision,\n\t   * and while undesirable for performance reasons, it is acceptable.\n\t   *\n\t   *     if (a.equals(b)) {\n\t   *       assert( a.hashCode() === b.hashCode() );\n\t   *     }\n\t   *\n\t   * All Immutable collections implement `equals` and `hashCode`.\n\t   *\n\t   */\n\t  function is(valueA, valueB) {\n\t    if (valueA === valueB || valueA !== valueA && valueB !== valueB) {\n\t      return true;\n\t    }\n\t    if (!valueA || !valueB) {\n\t      return false;\n\t    }\n\t    if (typeof valueA.valueOf === 'function' && typeof valueB.valueOf === 'function') {\n\t      valueA = valueA.valueOf();\n\t      valueB = valueB.valueOf();\n\t      if (valueA === valueB || valueA !== valueA && valueB !== valueB) {\n\t        return true;\n\t      }\n\t      if (!valueA || !valueB) {\n\t        return false;\n\t      }\n\t    }\n\t    if (typeof valueA.equals === 'function' && typeof valueB.equals === 'function' && valueA.equals(valueB)) {\n\t      return true;\n\t    }\n\t    return false;\n\t  }\n\t\n\t  function deepEqual(a, b) {\n\t    if (a === b) {\n\t      return true;\n\t    }\n\t\n\t    if (!isIterable(b) || a.size !== undefined && b.size !== undefined && a.size !== b.size || a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash || isKeyed(a) !== isKeyed(b) || isIndexed(a) !== isIndexed(b) || isOrdered(a) !== isOrdered(b)) {\n\t      return false;\n\t    }\n\t\n\t    if (a.size === 0 && b.size === 0) {\n\t      return true;\n\t    }\n\t\n\t    var notAssociative = !isAssociative(a);\n\t\n\t    if (isOrdered(a)) {\n\t      var entries = a.entries();\n\t      return b.every(function (v, k) {\n\t        var entry = entries.next().value;\n\t        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n\t      }) && entries.next().done;\n\t    }\n\t\n\t    var flipped = false;\n\t\n\t    if (a.size === undefined) {\n\t      if (b.size === undefined) {\n\t        if (typeof a.cacheResult === 'function') {\n\t          a.cacheResult();\n\t        }\n\t      } else {\n\t        flipped = true;\n\t        var _ = a;\n\t        a = b;\n\t        b = _;\n\t      }\n\t    }\n\t\n\t    var allEqual = true;\n\t    var bSize = b.__iterate(function (v, k) {\n\t      if (notAssociative ? !a.has(v) : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n\t        allEqual = false;\n\t        return false;\n\t      }\n\t    });\n\t\n\t    return allEqual && a.size === bSize;\n\t  }\n\t\n\t  createClass(Repeat, IndexedSeq);\n\t\n\t  function Repeat(value, times) {\n\t    if (!(this instanceof Repeat)) {\n\t      return new Repeat(value, times);\n\t    }\n\t    this._value = value;\n\t    this.size = times === undefined ? Infinity : Math.max(0, times);\n\t    if (this.size === 0) {\n\t      if (EMPTY_REPEAT) {\n\t        return EMPTY_REPEAT;\n\t      }\n\t      EMPTY_REPEAT = this;\n\t    }\n\t  }\n\t\n\t  Repeat.prototype.toString = function () {\n\t    if (this.size === 0) {\n\t      return 'Repeat []';\n\t    }\n\t    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n\t  };\n\t\n\t  Repeat.prototype.get = function (index, notSetValue) {\n\t    return this.has(index) ? this._value : notSetValue;\n\t  };\n\t\n\t  Repeat.prototype.includes = function (searchValue) {\n\t    return is(this._value, searchValue);\n\t  };\n\t\n\t  Repeat.prototype.slice = function (begin, end) {\n\t    var size = this.size;\n\t    return wholeSlice(begin, end, size) ? this : new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n\t  };\n\t\n\t  Repeat.prototype.reverse = function () {\n\t    return this;\n\t  };\n\t\n\t  Repeat.prototype.indexOf = function (searchValue) {\n\t    if (is(this._value, searchValue)) {\n\t      return 0;\n\t    }\n\t    return -1;\n\t  };\n\t\n\t  Repeat.prototype.lastIndexOf = function (searchValue) {\n\t    if (is(this._value, searchValue)) {\n\t      return this.size;\n\t    }\n\t    return -1;\n\t  };\n\t\n\t  Repeat.prototype.__iterate = function (fn, reverse) {\n\t    for (var ii = 0; ii < this.size; ii++) {\n\t      if (fn(this._value, ii, this) === false) {\n\t        return ii + 1;\n\t      }\n\t    }\n\t    return ii;\n\t  };\n\t\n\t  Repeat.prototype.__iterator = function (type, reverse) {\n\t    var this$0 = this;\n\t    var ii = 0;\n\t    return new Iterator(function () {\n\t      return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone();\n\t    });\n\t  };\n\t\n\t  Repeat.prototype.equals = function (other) {\n\t    return other instanceof Repeat ? is(this._value, other._value) : deepEqual(other);\n\t  };\n\t\n\t  var EMPTY_REPEAT;\n\t\n\t  function invariant(condition, error) {\n\t    if (!condition) throw new Error(error);\n\t  }\n\t\n\t  createClass(Range, IndexedSeq);\n\t\n\t  function Range(start, end, step) {\n\t    if (!(this instanceof Range)) {\n\t      return new Range(start, end, step);\n\t    }\n\t    invariant(step !== 0, 'Cannot step a Range by 0');\n\t    start = start || 0;\n\t    if (end === undefined) {\n\t      end = Infinity;\n\t    }\n\t    step = step === undefined ? 1 : Math.abs(step);\n\t    if (end < start) {\n\t      step = -step;\n\t    }\n\t    this._start = start;\n\t    this._end = end;\n\t    this._step = step;\n\t    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n\t    if (this.size === 0) {\n\t      if (EMPTY_RANGE) {\n\t        return EMPTY_RANGE;\n\t      }\n\t      EMPTY_RANGE = this;\n\t    }\n\t  }\n\t\n\t  Range.prototype.toString = function () {\n\t    if (this.size === 0) {\n\t      return 'Range []';\n\t    }\n\t    return 'Range [ ' + this._start + '...' + this._end + (this._step !== 1 ? ' by ' + this._step : '') + ' ]';\n\t  };\n\t\n\t  Range.prototype.get = function (index, notSetValue) {\n\t    return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;\n\t  };\n\t\n\t  Range.prototype.includes = function (searchValue) {\n\t    var possibleIndex = (searchValue - this._start) / this._step;\n\t    return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);\n\t  };\n\t\n\t  Range.prototype.slice = function (begin, end) {\n\t    if (wholeSlice(begin, end, this.size)) {\n\t      return this;\n\t    }\n\t    begin = resolveBegin(begin, this.size);\n\t    end = resolveEnd(end, this.size);\n\t    if (end <= begin) {\n\t      return new Range(0, 0);\n\t    }\n\t    return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n\t  };\n\t\n\t  Range.prototype.indexOf = function (searchValue) {\n\t    var offsetValue = searchValue - this._start;\n\t    if (offsetValue % this._step === 0) {\n\t      var index = offsetValue / this._step;\n\t      if (index >= 0 && index < this.size) {\n\t        return index;\n\t      }\n\t    }\n\t    return -1;\n\t  };\n\t\n\t  Range.prototype.lastIndexOf = function (searchValue) {\n\t    return this.indexOf(searchValue);\n\t  };\n\t\n\t  Range.prototype.__iterate = function (fn, reverse) {\n\t    var maxIndex = this.size - 1;\n\t    var step = this._step;\n\t    var value = reverse ? this._start + maxIndex * step : this._start;\n\t    for (var ii = 0; ii <= maxIndex; ii++) {\n\t      if (fn(value, ii, this) === false) {\n\t        return ii + 1;\n\t      }\n\t      value += reverse ? -step : step;\n\t    }\n\t    return ii;\n\t  };\n\t\n\t  Range.prototype.__iterator = function (type, reverse) {\n\t    var maxIndex = this.size - 1;\n\t    var step = this._step;\n\t    var value = reverse ? this._start + maxIndex * step : this._start;\n\t    var ii = 0;\n\t    return new Iterator(function () {\n\t      var v = value;\n\t      value += reverse ? -step : step;\n\t      return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n\t    });\n\t  };\n\t\n\t  Range.prototype.equals = function (other) {\n\t    return other instanceof Range ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual(this, other);\n\t  };\n\t\n\t  var EMPTY_RANGE;\n\t\n\t  createClass(Collection, Iterable);\n\t  function Collection() {\n\t    throw TypeError('Abstract');\n\t  }\n\t\n\t  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\t\n\t  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\t\n\t  createClass(SetCollection, Collection);function SetCollection() {}\n\t\n\t  Collection.Keyed = KeyedCollection;\n\t  Collection.Indexed = IndexedCollection;\n\t  Collection.Set = SetCollection;\n\t\n\t  var imul = typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ? Math.imul : function imul(a, b) {\n\t    a = a | 0; // int\n\t    b = b | 0; // int\n\t    var c = a & 0xffff;\n\t    var d = b & 0xffff;\n\t    // Shift by 0 fixes the sign on the high part.\n\t    return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0; // int\n\t  };\n\t\n\t  // v8 has an optimization for storing 31-bit signed numbers.\n\t  // Values which have either 00 or 11 as the high order bits qualify.\n\t  // This function drops the highest order bit in a signed number, maintaining\n\t  // the sign bit.\n\t  function smi(i32) {\n\t    return i32 >>> 1 & 0x40000000 | i32 & 0xBFFFFFFF;\n\t  }\n\t\n\t  function hash(o) {\n\t    if (o === false || o === null || o === undefined) {\n\t      return 0;\n\t    }\n\t    if (typeof o.valueOf === 'function') {\n\t      o = o.valueOf();\n\t      if (o === false || o === null || o === undefined) {\n\t        return 0;\n\t      }\n\t    }\n\t    if (o === true) {\n\t      return 1;\n\t    }\n\t    var type = typeof o === 'undefined' ? 'undefined' : _typeof(o);\n\t    if (type === 'number') {\n\t      if (o !== o || o === Infinity) {\n\t        return 0;\n\t      }\n\t      var h = o | 0;\n\t      if (h !== o) {\n\t        h ^= o * 0xFFFFFFFF;\n\t      }\n\t      while (o > 0xFFFFFFFF) {\n\t        o /= 0xFFFFFFFF;\n\t        h ^= o;\n\t      }\n\t      return smi(h);\n\t    }\n\t    if (type === 'string') {\n\t      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n\t    }\n\t    if (typeof o.hashCode === 'function') {\n\t      return o.hashCode();\n\t    }\n\t    if (type === 'object') {\n\t      return hashJSObj(o);\n\t    }\n\t    if (typeof o.toString === 'function') {\n\t      return hashString(o.toString());\n\t    }\n\t    throw new Error('Value type ' + type + ' cannot be hashed.');\n\t  }\n\t\n\t  function cachedHashString(string) {\n\t    var hash = stringHashCache[string];\n\t    if (hash === undefined) {\n\t      hash = hashString(string);\n\t      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n\t        STRING_HASH_CACHE_SIZE = 0;\n\t        stringHashCache = {};\n\t      }\n\t      STRING_HASH_CACHE_SIZE++;\n\t      stringHashCache[string] = hash;\n\t    }\n\t    return hash;\n\t  }\n\t\n\t  // http://jsperf.com/hashing-strings\n\t  function hashString(string) {\n\t    // This is the hash from JVM\n\t    // The hash code for a string is computed as\n\t    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n\t    // where s[i] is the ith character of the string and n is the length of\n\t    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n\t    // (exclusive) by dropping high bits.\n\t    var hash = 0;\n\t    for (var ii = 0; ii < string.length; ii++) {\n\t      hash = 31 * hash + string.charCodeAt(ii) | 0;\n\t    }\n\t    return smi(hash);\n\t  }\n\t\n\t  function hashJSObj(obj) {\n\t    var hash;\n\t    if (usingWeakMap) {\n\t      hash = weakMap.get(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = obj[UID_HASH_KEY];\n\t    if (hash !== undefined) {\n\t      return hash;\n\t    }\n\t\n\t    if (!canDefineProperty) {\n\t      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t\n\t      hash = getIENodeHash(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = ++objHashUID;\n\t    if (objHashUID & 0x40000000) {\n\t      objHashUID = 0;\n\t    }\n\t\n\t    if (usingWeakMap) {\n\t      weakMap.set(obj, hash);\n\t    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n\t      throw new Error('Non-extensible objects are not allowed as keys.');\n\t    } else if (canDefineProperty) {\n\t      Object.defineProperty(obj, UID_HASH_KEY, {\n\t        'enumerable': false,\n\t        'configurable': false,\n\t        'writable': false,\n\t        'value': hash\n\t      });\n\t    } else if (obj.propertyIsEnumerable !== undefined && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n\t      // Since we can't define a non-enumerable property on the object\n\t      // we'll hijack one of the less-used non-enumerable properties to\n\t      // save our hash on it. Since this is a function it will not show up in\n\t      // `JSON.stringify` which is what we want.\n\t      obj.propertyIsEnumerable = function () {\n\t        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n\t      };\n\t      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n\t    } else if (obj.nodeType !== undefined) {\n\t      // At this point we couldn't get the IE `uniqueID` to use as a hash\n\t      // and we couldn't use a non-enumerable property to exploit the\n\t      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n\t      // itself.\n\t      obj[UID_HASH_KEY] = hash;\n\t    } else {\n\t      throw new Error('Unable to set a non-enumerable property on object.');\n\t    }\n\t\n\t    return hash;\n\t  }\n\t\n\t  // Get references to ES5 object methods.\n\t  var isExtensible = Object.isExtensible;\n\t\n\t  // True if Object.defineProperty works as expected. IE8 fails this test.\n\t  var canDefineProperty = function () {\n\t    try {\n\t      Object.defineProperty({}, '@', {});\n\t      return true;\n\t    } catch (e) {\n\t      return false;\n\t    }\n\t  }();\n\t\n\t  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n\t  // and avoid memory leaks from the IE cloneNode bug.\n\t  function getIENodeHash(node) {\n\t    if (node && node.nodeType > 0) {\n\t      switch (node.nodeType) {\n\t        case 1:\n\t          // Element\n\t          return node.uniqueID;\n\t        case 9:\n\t          // Document\n\t          return node.documentElement && node.documentElement.uniqueID;\n\t      }\n\t    }\n\t  }\n\t\n\t  // If possible, use a WeakMap.\n\t  var usingWeakMap = typeof WeakMap === 'function';\n\t  var weakMap;\n\t  if (usingWeakMap) {\n\t    weakMap = new WeakMap();\n\t  }\n\t\n\t  var objHashUID = 0;\n\t\n\t  var UID_HASH_KEY = '__immutablehash__';\n\t  if (typeof Symbol === 'function') {\n\t    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n\t  }\n\t\n\t  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n\t  var STRING_HASH_CACHE_MAX_SIZE = 255;\n\t  var STRING_HASH_CACHE_SIZE = 0;\n\t  var stringHashCache = {};\n\t\n\t  function assertNotInfinite(size) {\n\t    invariant(size !== Infinity, 'Cannot perform this action with an infinite size.');\n\t  }\n\t\n\t  createClass(Map, KeyedCollection);\n\t\n\t  // @pragma Construction\n\t\n\t  function Map(value) {\n\t    return value === null || value === undefined ? emptyMap() : isMap(value) && !isOrdered(value) ? value : emptyMap().withMutations(function (map) {\n\t      var iter = KeyedIterable(value);\n\t      assertNotInfinite(iter.size);\n\t      iter.forEach(function (v, k) {\n\t        return map.set(k, v);\n\t      });\n\t    });\n\t  }\n\t\n\t  Map.of = function () {\n\t    var keyValues = SLICE$0.call(arguments, 0);\n\t    return emptyMap().withMutations(function (map) {\n\t      for (var i = 0; i < keyValues.length; i += 2) {\n\t        if (i + 1 >= keyValues.length) {\n\t          throw new Error('Missing value for key: ' + keyValues[i]);\n\t        }\n\t        map.set(keyValues[i], keyValues[i + 1]);\n\t      }\n\t    });\n\t  };\n\t\n\t  Map.prototype.toString = function () {\n\t    return this.__toString('Map {', '}');\n\t  };\n\t\n\t  // @pragma Access\n\t\n\t  Map.prototype.get = function (k, notSetValue) {\n\t    return this._root ? this._root.get(0, undefined, k, notSetValue) : notSetValue;\n\t  };\n\t\n\t  // @pragma Modification\n\t\n\t  Map.prototype.set = function (k, v) {\n\t    return updateMap(this, k, v);\n\t  };\n\t\n\t  Map.prototype.setIn = function (keyPath, v) {\n\t    return this.updateIn(keyPath, NOT_SET, function () {\n\t      return v;\n\t    });\n\t  };\n\t\n\t  Map.prototype.remove = function (k) {\n\t    return updateMap(this, k, NOT_SET);\n\t  };\n\t\n\t  Map.prototype.deleteIn = function (keyPath) {\n\t    return this.updateIn(keyPath, function () {\n\t      return NOT_SET;\n\t    });\n\t  };\n\t\n\t  Map.prototype.update = function (k, notSetValue, updater) {\n\t    return arguments.length === 1 ? k(this) : this.updateIn([k], notSetValue, updater);\n\t  };\n\t\n\t  Map.prototype.updateIn = function (keyPath, notSetValue, updater) {\n\t    if (!updater) {\n\t      updater = notSetValue;\n\t      notSetValue = undefined;\n\t    }\n\t    var updatedValue = updateInDeepMap(this, forceIterator(keyPath), notSetValue, updater);\n\t    return updatedValue === NOT_SET ? undefined : updatedValue;\n\t  };\n\t\n\t  Map.prototype.clear = function () {\n\t    if (this.size === 0) {\n\t      return this;\n\t    }\n\t    if (this.__ownerID) {\n\t      this.size = 0;\n\t      this._root = null;\n\t      this.__hash = undefined;\n\t      this.__altered = true;\n\t      return this;\n\t    }\n\t    return emptyMap();\n\t  };\n\t\n\t  // @pragma Composition\n\t\n\t  Map.prototype.merge = function () /*...iters*/{\n\t    return mergeIntoMapWith(this, undefined, arguments);\n\t  };\n\t\n\t  Map.prototype.mergeWith = function (merger) {\n\t    var iters = SLICE$0.call(arguments, 1);\n\t    return mergeIntoMapWith(this, merger, iters);\n\t  };\n\t\n\t  Map.prototype.mergeIn = function (keyPath) {\n\t    var iters = SLICE$0.call(arguments, 1);\n\t    return this.updateIn(keyPath, emptyMap(), function (m) {\n\t      return typeof m.merge === 'function' ? m.merge.apply(m, iters) : iters[iters.length - 1];\n\t    });\n\t  };\n\t\n\t  Map.prototype.mergeDeep = function () /*...iters*/{\n\t    return mergeIntoMapWith(this, deepMerger, arguments);\n\t  };\n\t\n\t  Map.prototype.mergeDeepWith = function (merger) {\n\t    var iters = SLICE$0.call(arguments, 1);\n\t    return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n\t  };\n\t\n\t  Map.prototype.mergeDeepIn = function (keyPath) {\n\t    var iters = SLICE$0.call(arguments, 1);\n\t    return this.updateIn(keyPath, emptyMap(), function (m) {\n\t      return typeof m.mergeDeep === 'function' ? m.mergeDeep.apply(m, iters) : iters[iters.length - 1];\n\t    });\n\t  };\n\t\n\t  Map.prototype.sort = function (comparator) {\n\t    // Late binding\n\t    return OrderedMap(sortFactory(this, comparator));\n\t  };\n\t\n\t  Map.prototype.sortBy = function (mapper, comparator) {\n\t    // Late binding\n\t    return OrderedMap(sortFactory(this, comparator, mapper));\n\t  };\n\t\n\t  // @pragma Mutability\n\t\n\t  Map.prototype.withMutations = function (fn) {\n\t    var mutable = this.asMutable();\n\t    fn(mutable);\n\t    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n\t  };\n\t\n\t  Map.prototype.asMutable = function () {\n\t    return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n\t  };\n\t\n\t  Map.prototype.asImmutable = function () {\n\t    return this.__ensureOwner();\n\t  };\n\t\n\t  Map.prototype.wasAltered = function () {\n\t    return this.__altered;\n\t  };\n\t\n\t  Map.prototype.__iterator = function (type, reverse) {\n\t    return new MapIterator(this, type, reverse);\n\t  };\n\t\n\t  Map.prototype.__iterate = function (fn, reverse) {\n\t    var this$0 = this;\n\t    var iterations = 0;\n\t    this._root && this._root.iterate(function (entry) {\n\t      iterations++;\n\t      return fn(entry[1], entry[0], this$0);\n\t    }, reverse);\n\t    return iterations;\n\t  };\n\t\n\t  Map.prototype.__ensureOwner = function (ownerID) {\n\t    if (ownerID === this.__ownerID) {\n\t      return this;\n\t    }\n\t    if (!ownerID) {\n\t      this.__ownerID = ownerID;\n\t      this.__altered = false;\n\t      return this;\n\t    }\n\t    return makeMap(this.size, this._root, ownerID, this.__hash);\n\t  };\n\t\n\t  function isMap(maybeMap) {\n\t    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n\t  }\n\t\n\t  Map.isMap = isMap;\n\t\n\t  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\t\n\t  var MapPrototype = Map.prototype;\n\t  MapPrototype[IS_MAP_SENTINEL] = true;\n\t  MapPrototype[DELETE] = MapPrototype.remove;\n\t  MapPrototype.removeIn = MapPrototype.deleteIn;\n\t\n\t  // #pragma Trie Nodes\n\t\n\t\n\t  function ArrayMapNode(ownerID, entries) {\n\t    this.ownerID = ownerID;\n\t    this.entries = entries;\n\t  }\n\t\n\t  ArrayMapNode.prototype.get = function (shift, keyHash, key, notSetValue) {\n\t    var entries = this.entries;\n\t    for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t      if (is(key, entries[ii][0])) {\n\t        return entries[ii][1];\n\t      }\n\t    }\n\t    return notSetValue;\n\t  };\n\t\n\t  ArrayMapNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t    var removed = value === NOT_SET;\n\t\n\t    var entries = this.entries;\n\t    var idx = 0;\n\t    for (var len = entries.length; idx < len; idx++) {\n\t      if (is(key, entries[idx][0])) {\n\t        break;\n\t      }\n\t    }\n\t    var exists = idx < len;\n\t\n\t    if (exists ? entries[idx][1] === value : removed) {\n\t      return this;\n\t    }\n\t\n\t    SetRef(didAlter);\n\t    (removed || !exists) && SetRef(didChangeSize);\n\t\n\t    if (removed && entries.length === 1) {\n\t      return; // undefined\n\t    }\n\t\n\t    if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n\t      return createNodes(ownerID, entries, key, value);\n\t    }\n\t\n\t    var isEditable = ownerID && ownerID === this.ownerID;\n\t    var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t    if (exists) {\n\t      if (removed) {\n\t        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();\n\t      } else {\n\t        newEntries[idx] = [key, value];\n\t      }\n\t    } else {\n\t      newEntries.push([key, value]);\n\t    }\n\t\n\t    if (isEditable) {\n\t      this.entries = newEntries;\n\t      return this;\n\t    }\n\t\n\t    return new ArrayMapNode(ownerID, newEntries);\n\t  };\n\t\n\t  function BitmapIndexedNode(ownerID, bitmap, nodes) {\n\t    this.ownerID = ownerID;\n\t    this.bitmap = bitmap;\n\t    this.nodes = nodes;\n\t  }\n\t\n\t  BitmapIndexedNode.prototype.get = function (shift, keyHash, key, notSetValue) {\n\t    if (keyHash === undefined) {\n\t      keyHash = hash(key);\n\t    }\n\t    var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);\n\t    var bitmap = this.bitmap;\n\t    return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(shift + SHIFT, keyHash, key, notSetValue);\n\t  };\n\t\n\t  BitmapIndexedNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t    if (keyHash === undefined) {\n\t      keyHash = hash(key);\n\t    }\n\t    var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t    var bit = 1 << keyHashFrag;\n\t    var bitmap = this.bitmap;\n\t    var exists = (bitmap & bit) !== 0;\n\t\n\t    if (!exists && value === NOT_SET) {\n\t      return this;\n\t    }\n\t\n\t    var idx = popCount(bitmap & bit - 1);\n\t    var nodes = this.nodes;\n\t    var node = exists ? nodes[idx] : undefined;\n\t    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t\n\t    if (newNode === node) {\n\t      return this;\n\t    }\n\t\n\t    if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n\t      return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n\t    }\n\t\n\t    if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n\t      return nodes[idx ^ 1];\n\t    }\n\t\n\t    if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n\t      return newNode;\n\t    }\n\t\n\t    var isEditable = ownerID && ownerID === this.ownerID;\n\t    var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n\t    var newNodes = exists ? newNode ? setIn(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);\n\t\n\t    if (isEditable) {\n\t      this.bitmap = newBitmap;\n\t      this.nodes = newNodes;\n\t      return this;\n\t    }\n\t\n\t    return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n\t  };\n\t\n\t  function HashArrayMapNode(ownerID, count, nodes) {\n\t    this.ownerID = ownerID;\n\t    this.count = count;\n\t    this.nodes = nodes;\n\t  }\n\t\n\t  HashArrayMapNode.prototype.get = function (shift, keyHash, key, notSetValue) {\n\t    if (keyHash === undefined) {\n\t      keyHash = hash(key);\n\t    }\n\t    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t    var node = this.nodes[idx];\n\t    return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n\t  };\n\t\n\t  HashArrayMapNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t    if (keyHash === undefined) {\n\t      keyHash = hash(key);\n\t    }\n\t    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t    var removed = value === NOT_SET;\n\t    var nodes = this.nodes;\n\t    var node = nodes[idx];\n\t\n\t    if (removed && !node) {\n\t      return this;\n\t    }\n\t\n\t    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t    if (newNode === node) {\n\t      return this;\n\t    }\n\t\n\t    var newCount = this.count;\n\t    if (!node) {\n\t      newCount++;\n\t    } else if (!newNode) {\n\t      newCount--;\n\t      if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n\t        return packNodes(ownerID, nodes, newCount, idx);\n\t      }\n\t    }\n\t\n\t    var isEditable = ownerID && ownerID === this.ownerID;\n\t    var newNodes = setIn(nodes, idx, newNode, isEditable);\n\t\n\t    if (isEditable) {\n\t      this.count = newCount;\n\t      this.nodes = newNodes;\n\t      return this;\n\t    }\n\t\n\t    return new HashArrayMapNode(ownerID, newCount, newNodes);\n\t  };\n\t\n\t  function HashCollisionNode(ownerID, keyHash, entries) {\n\t    this.ownerID = ownerID;\n\t    this.keyHash = keyHash;\n\t    this.entries = entries;\n\t  }\n\t\n\t  HashCollisionNode.prototype.get = function (shift, keyHash, key, notSetValue) {\n\t    var entries = this.entries;\n\t    for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t      if (is(key, entries[ii][0])) {\n\t        return entries[ii][1];\n\t      }\n\t    }\n\t    return notSetValue;\n\t  };\n\t\n\t  HashCollisionNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t    if (keyHash === undefined) {\n\t      keyHash = hash(key);\n\t    }\n\t\n\t    var removed = value === NOT_SET;\n\t\n\t    if (keyHash !== this.keyHash) {\n\t      if (removed) {\n\t        return this;\n\t      }\n\t      SetRef(didAlter);\n\t      SetRef(didChangeSize);\n\t      return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n\t    }\n\t\n\t    var entries = this.entries;\n\t    var idx = 0;\n\t    for (var len = entries.length; idx < len; idx++) {\n\t      if (is(key, entries[idx][0])) {\n\t        break;\n\t      }\n\t    }\n\t    var exists = idx < len;\n\t\n\t    if (exists ? entries[idx][1] === value : removed) {\n\t      return this;\n\t    }\n\t\n\t    SetRef(didAlter);\n\t    (removed || !exists) && SetRef(didChangeSize);\n\t\n\t    if (removed && len === 2) {\n\t      return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n\t    }\n\t\n\t    var isEditable = ownerID && ownerID === this.ownerID;\n\t    var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t    if (exists) {\n\t      if (removed) {\n\t        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();\n\t      } else {\n\t        newEntries[idx] = [key, value];\n\t      }\n\t    } else {\n\t      newEntries.push([key, value]);\n\t    }\n\t\n\t    if (isEditable) {\n\t      this.entries = newEntries;\n\t      return this;\n\t    }\n\t\n\t    return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n\t  };\n\t\n\t  function ValueNode(ownerID, keyHash, entry) {\n\t    this.ownerID = ownerID;\n\t    this.keyHash = keyHash;\n\t    this.entry = entry;\n\t  }\n\t\n\t  ValueNode.prototype.get = function (shift, keyHash, key, notSetValue) {\n\t    return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n\t  };\n\t\n\t  ValueNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t    var removed = value === NOT_SET;\n\t    var keyMatch = is(key, this.entry[0]);\n\t    if (keyMatch ? value === this.entry[1] : removed) {\n\t      return this;\n\t    }\n\t\n\t    SetRef(didAlter);\n\t\n\t    if (removed) {\n\t      SetRef(didChangeSize);\n\t      return; // undefined\n\t    }\n\t\n\t    if (keyMatch) {\n\t      if (ownerID && ownerID === this.ownerID) {\n\t        this.entry[1] = value;\n\t        return this;\n\t      }\n\t      return new ValueNode(ownerID, this.keyHash, [key, value]);\n\t    }\n\t\n\t    SetRef(didChangeSize);\n\t    return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n\t  };\n\t\n\t  // #pragma Iterators\n\t\n\t  ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function (fn, reverse) {\n\t    var entries = this.entries;\n\t    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n\t      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  };\n\t\n\t  BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n\t    var nodes = this.nodes;\n\t    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n\t      var node = nodes[reverse ? maxIndex - ii : ii];\n\t      if (node && node.iterate(fn, reverse) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  };\n\t\n\t  ValueNode.prototype.iterate = function (fn, reverse) {\n\t    return fn(this.entry);\n\t  };\n\t\n\t  createClass(MapIterator, Iterator);\n\t\n\t  function MapIterator(map, type, reverse) {\n\t    this._type = type;\n\t    this._reverse = reverse;\n\t    this._stack = map._root && mapIteratorFrame(map._root);\n\t  }\n\t\n\t  MapIterator.prototype.next = function () {\n\t    var type = this._type;\n\t    var stack = this._stack;\n\t    while (stack) {\n\t      var node = stack.node;\n\t      var index = stack.index++;\n\t      var maxIndex;\n\t      if (node.entry) {\n\t        if (index === 0) {\n\t          return mapIteratorValue(type, node.entry);\n\t        }\n\t      } else if (node.entries) {\n\t        maxIndex = node.entries.length - 1;\n\t        if (index <= maxIndex) {\n\t          return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n\t        }\n\t      } else {\n\t        maxIndex = node.nodes.length - 1;\n\t        if (index <= maxIndex) {\n\t          var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n\t          if (subNode) {\n\t            if (subNode.entry) {\n\t              return mapIteratorValue(type, subNode.entry);\n\t            }\n\t            stack = this._stack = mapIteratorFrame(subNode, stack);\n\t          }\n\t          continue;\n\t        }\n\t      }\n\t      stack = this._stack = this._stack.__prev;\n\t    }\n\t    return iteratorDone();\n\t  };\n\t\n\t  function mapIteratorValue(type, entry) {\n\t    return iteratorValue(type, entry[0], entry[1]);\n\t  }\n\t\n\t  function mapIteratorFrame(node, prev) {\n\t    return {\n\t      node: node,\n\t      index: 0,\n\t      __prev: prev\n\t    };\n\t  }\n\t\n\t  function makeMap(size, root, ownerID, hash) {\n\t    var map = Object.create(MapPrototype);\n\t    map.size = size;\n\t    map._root = root;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_MAP;\n\t  function emptyMap() {\n\t    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n\t  }\n\t\n\t  function updateMap(map, k, v) {\n\t    var newRoot;\n\t    var newSize;\n\t    if (!map._root) {\n\t      if (v === NOT_SET) {\n\t        return map;\n\t      }\n\t      newSize = 1;\n\t      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n\t    } else {\n\t      var didChangeSize = MakeRef(CHANGE_LENGTH);\n\t      var didAlter = MakeRef(DID_ALTER);\n\t      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n\t      if (!didAlter.value) {\n\t        return map;\n\t      }\n\t      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n\t    }\n\t    if (map.__ownerID) {\n\t      map.size = newSize;\n\t      map._root = newRoot;\n\t      map.__hash = undefined;\n\t      map.__altered = true;\n\t      return map;\n\t    }\n\t    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n\t  }\n\t\n\t  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t    if (!node) {\n\t      if (value === NOT_SET) {\n\t        return node;\n\t      }\n\t      SetRef(didAlter);\n\t      SetRef(didChangeSize);\n\t      return new ValueNode(ownerID, keyHash, [key, value]);\n\t    }\n\t    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n\t  }\n\t\n\t  function isLeafNode(node) {\n\t    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n\t  }\n\t\n\t  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n\t    if (node.keyHash === keyHash) {\n\t      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n\t    }\n\t\n\t    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n\t    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t\n\t    var newNode;\n\t    var nodes = idx1 === idx2 ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\t\n\t    return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);\n\t  }\n\t\n\t  function createNodes(ownerID, entries, key, value) {\n\t    if (!ownerID) {\n\t      ownerID = new OwnerID();\n\t    }\n\t    var node = new ValueNode(ownerID, hash(key), [key, value]);\n\t    for (var ii = 0; ii < entries.length; ii++) {\n\t      var entry = entries[ii];\n\t      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n\t    }\n\t    return node;\n\t  }\n\t\n\t  function packNodes(ownerID, nodes, count, excluding) {\n\t    var bitmap = 0;\n\t    var packedII = 0;\n\t    var packedNodes = new Array(count);\n\t    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n\t      var node = nodes[ii];\n\t      if (node !== undefined && ii !== excluding) {\n\t        bitmap |= bit;\n\t        packedNodes[packedII++] = node;\n\t      }\n\t    }\n\t    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n\t  }\n\t\n\t  function expandNodes(ownerID, nodes, bitmap, including, node) {\n\t    var count = 0;\n\t    var expandedNodes = new Array(SIZE);\n\t    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n\t      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n\t    }\n\t    expandedNodes[including] = node;\n\t    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n\t  }\n\t\n\t  function mergeIntoMapWith(map, merger, iterables) {\n\t    var iters = [];\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = KeyedIterable(value);\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function (v) {\n\t          return fromJS(v);\n\t        });\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    return mergeIntoCollectionWith(map, merger, iters);\n\t  }\n\t\n\t  function deepMerger(existing, value, key) {\n\t    return existing && existing.mergeDeep && isIterable(value) ? existing.mergeDeep(value) : is(existing, value) ? existing : value;\n\t  }\n\t\n\t  function deepMergerWith(merger) {\n\t    return function (existing, value, key) {\n\t      if (existing && existing.mergeDeepWith && isIterable(value)) {\n\t        return existing.mergeDeepWith(merger, value);\n\t      }\n\t      var nextValue = merger(existing, value, key);\n\t      return is(existing, nextValue) ? existing : nextValue;\n\t    };\n\t  }\n\t\n\t  function mergeIntoCollectionWith(collection, merger, iters) {\n\t    iters = iters.filter(function (x) {\n\t      return x.size !== 0;\n\t    });\n\t    if (iters.length === 0) {\n\t      return collection;\n\t    }\n\t    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n\t      return collection.constructor(iters[0]);\n\t    }\n\t    return collection.withMutations(function (collection) {\n\t      var mergeIntoMap = merger ? function (value, key) {\n\t        collection.update(key, NOT_SET, function (existing) {\n\t          return existing === NOT_SET ? value : merger(existing, value, key);\n\t        });\n\t      } : function (value, key) {\n\t        collection.set(key, value);\n\t      };\n\t      for (var ii = 0; ii < iters.length; ii++) {\n\t        iters[ii].forEach(mergeIntoMap);\n\t      }\n\t    });\n\t  }\n\t\n\t  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n\t    var isNotSet = existing === NOT_SET;\n\t    var step = keyPathIter.next();\n\t    if (step.done) {\n\t      var existingValue = isNotSet ? notSetValue : existing;\n\t      var newValue = updater(existingValue);\n\t      return newValue === existingValue ? existing : newValue;\n\t    }\n\t    invariant(isNotSet || existing && existing.set, 'invalid keyPath');\n\t    var key = step.value;\n\t    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n\t    var nextUpdated = updateInDeepMap(nextExisting, keyPathIter, notSetValue, updater);\n\t    return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? existing.remove(key) : (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n\t  }\n\t\n\t  function popCount(x) {\n\t    x = x - (x >> 1 & 0x55555555);\n\t    x = (x & 0x33333333) + (x >> 2 & 0x33333333);\n\t    x = x + (x >> 4) & 0x0f0f0f0f;\n\t    x = x + (x >> 8);\n\t    x = x + (x >> 16);\n\t    return x & 0x7f;\n\t  }\n\t\n\t  function setIn(array, idx, val, canEdit) {\n\t    var newArray = canEdit ? array : arrCopy(array);\n\t    newArray[idx] = val;\n\t    return newArray;\n\t  }\n\t\n\t  function spliceIn(array, idx, val, canEdit) {\n\t    var newLen = array.length + 1;\n\t    if (canEdit && idx + 1 === newLen) {\n\t      array[idx] = val;\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        newArray[ii] = val;\n\t        after = -1;\n\t      } else {\n\t        newArray[ii] = array[ii + after];\n\t      }\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  function spliceOut(array, idx, canEdit) {\n\t    var newLen = array.length - 1;\n\t    if (canEdit && idx === newLen) {\n\t      array.pop();\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        after = 1;\n\t      }\n\t      newArray[ii] = array[ii + after];\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n\t  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n\t  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\t\n\t  createClass(List, IndexedCollection);\n\t\n\t  // @pragma Construction\n\t\n\t  function List(value) {\n\t    var empty = emptyList();\n\t    if (value === null || value === undefined) {\n\t      return empty;\n\t    }\n\t    if (isList(value)) {\n\t      return value;\n\t    }\n\t    var iter = IndexedIterable(value);\n\t    var size = iter.size;\n\t    if (size === 0) {\n\t      return empty;\n\t    }\n\t    assertNotInfinite(size);\n\t    if (size > 0 && size < SIZE) {\n\t      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n\t    }\n\t    return empty.withMutations(function (list) {\n\t      list.setSize(size);\n\t      iter.forEach(function (v, i) {\n\t        return list.set(i, v);\n\t      });\n\t    });\n\t  }\n\t\n\t  List.of = function () /*...values*/{\n\t    return this(arguments);\n\t  };\n\t\n\t  List.prototype.toString = function () {\n\t    return this.__toString('List [', ']');\n\t  };\n\t\n\t  // @pragma Access\n\t\n\t  List.prototype.get = function (index, notSetValue) {\n\t    index = wrapIndex(this, index);\n\t    if (index >= 0 && index < this.size) {\n\t      index += this._origin;\n\t      var node = listNodeFor(this, index);\n\t      return node && node.array[index & MASK];\n\t    }\n\t    return notSetValue;\n\t  };\n\t\n\t  // @pragma Modification\n\t\n\t  List.prototype.set = function (index, value) {\n\t    return updateList(this, index, value);\n\t  };\n\t\n\t  List.prototype.remove = function (index) {\n\t    return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);\n\t  };\n\t\n\t  List.prototype.insert = function (index, value) {\n\t    return this.splice(index, 0, value);\n\t  };\n\t\n\t  List.prototype.clear = function () {\n\t    if (this.size === 0) {\n\t      return this;\n\t    }\n\t    if (this.__ownerID) {\n\t      this.size = this._origin = this._capacity = 0;\n\t      this._level = SHIFT;\n\t      this._root = this._tail = null;\n\t      this.__hash = undefined;\n\t      this.__altered = true;\n\t      return this;\n\t    }\n\t    return emptyList();\n\t  };\n\t\n\t  List.prototype.push = function () /*...values*/{\n\t    var values = arguments;\n\t    var oldSize = this.size;\n\t    return this.withMutations(function (list) {\n\t      setListBounds(list, 0, oldSize + values.length);\n\t      for (var ii = 0; ii < values.length; ii++) {\n\t        list.set(oldSize + ii, values[ii]);\n\t      }\n\t    });\n\t  };\n\t\n\t  List.prototype.pop = function () {\n\t    return setListBounds(this, 0, -1);\n\t  };\n\t\n\t  List.prototype.unshift = function () /*...values*/{\n\t    var values = arguments;\n\t    return this.withMutations(function (list) {\n\t      setListBounds(list, -values.length);\n\t      for (var ii = 0; ii < values.length; ii++) {\n\t        list.set(ii, values[ii]);\n\t      }\n\t    });\n\t  };\n\t\n\t  List.prototype.shift = function () {\n\t    return setListBounds(this, 1);\n\t  };\n\t\n\t  // @pragma Composition\n\t\n\t  List.prototype.merge = function () /*...iters*/{\n\t    return mergeIntoListWith(this, undefined, arguments);\n\t  };\n\t\n\t  List.prototype.mergeWith = function (merger) {\n\t    var iters = SLICE$0.call(arguments, 1);\n\t    return mergeIntoListWith(this, merger, iters);\n\t  };\n\t\n\t  List.prototype.mergeDeep = function () /*...iters*/{\n\t    return mergeIntoListWith(this, deepMerger, arguments);\n\t  };\n\t\n\t  List.prototype.mergeDeepWith = function (merger) {\n\t    var iters = SLICE$0.call(arguments, 1);\n\t    return mergeIntoListWith(this, deepMergerWith(merger), iters);\n\t  };\n\t\n\t  List.prototype.setSize = function (size) {\n\t    return setListBounds(this, 0, size);\n\t  };\n\t\n\t  // @pragma Iteration\n\t\n\t  List.prototype.slice = function (begin, end) {\n\t    var size = this.size;\n\t    if (wholeSlice(begin, end, size)) {\n\t      return this;\n\t    }\n\t    return setListBounds(this, resolveBegin(begin, size), resolveEnd(end, size));\n\t  };\n\t\n\t  List.prototype.__iterator = function (type, reverse) {\n\t    var index = 0;\n\t    var values = iterateList(this, reverse);\n\t    return new Iterator(function () {\n\t      var value = values();\n\t      return value === DONE ? iteratorDone() : iteratorValue(type, index++, value);\n\t    });\n\t  };\n\t\n\t  List.prototype.__iterate = function (fn, reverse) {\n\t    var index = 0;\n\t    var values = iterateList(this, reverse);\n\t    var value;\n\t    while ((value = values()) !== DONE) {\n\t      if (fn(value, index++, this) === false) {\n\t        break;\n\t      }\n\t    }\n\t    return index;\n\t  };\n\t\n\t  List.prototype.__ensureOwner = function (ownerID) {\n\t    if (ownerID === this.__ownerID) {\n\t      return this;\n\t    }\n\t    if (!ownerID) {\n\t      this.__ownerID = ownerID;\n\t      return this;\n\t    }\n\t    return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n\t  };\n\t\n\t  function isList(maybeList) {\n\t    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n\t  }\n\t\n\t  List.isList = isList;\n\t\n\t  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\t\n\t  var ListPrototype = List.prototype;\n\t  ListPrototype[IS_LIST_SENTINEL] = true;\n\t  ListPrototype[DELETE] = ListPrototype.remove;\n\t  ListPrototype.setIn = MapPrototype.setIn;\n\t  ListPrototype.deleteIn = ListPrototype.removeIn = MapPrototype.removeIn;\n\t  ListPrototype.update = MapPrototype.update;\n\t  ListPrototype.updateIn = MapPrototype.updateIn;\n\t  ListPrototype.mergeIn = MapPrototype.mergeIn;\n\t  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  ListPrototype.withMutations = MapPrototype.withMutations;\n\t  ListPrototype.asMutable = MapPrototype.asMutable;\n\t  ListPrototype.asImmutable = MapPrototype.asImmutable;\n\t  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t  function VNode(array, ownerID) {\n\t    this.array = array;\n\t    this.ownerID = ownerID;\n\t  }\n\t\n\t  // TODO: seems like these methods are very similar\n\t\n\t  VNode.prototype.removeBefore = function (ownerID, level, index) {\n\t    if (index === level ? 1 << level : 0 || this.array.length === 0) {\n\t      return this;\n\t    }\n\t    var originIndex = index >>> level & MASK;\n\t    if (originIndex >= this.array.length) {\n\t      return new VNode([], ownerID);\n\t    }\n\t    var removingFirst = originIndex === 0;\n\t    var newChild;\n\t    if (level > 0) {\n\t      var oldChild = this.array[originIndex];\n\t      newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n\t      if (newChild === oldChild && removingFirst) {\n\t        return this;\n\t      }\n\t    }\n\t    if (removingFirst && !newChild) {\n\t      return this;\n\t    }\n\t    var editable = editableVNode(this, ownerID);\n\t    if (!removingFirst) {\n\t      for (var ii = 0; ii < originIndex; ii++) {\n\t        editable.array[ii] = undefined;\n\t      }\n\t    }\n\t    if (newChild) {\n\t      editable.array[originIndex] = newChild;\n\t    }\n\t    return editable;\n\t  };\n\t\n\t  VNode.prototype.removeAfter = function (ownerID, level, index) {\n\t    if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n\t      return this;\n\t    }\n\t    var sizeIndex = index - 1 >>> level & MASK;\n\t    if (sizeIndex >= this.array.length) {\n\t      return this;\n\t    }\n\t\n\t    var newChild;\n\t    if (level > 0) {\n\t      var oldChild = this.array[sizeIndex];\n\t      newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n\t      if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n\t        return this;\n\t      }\n\t    }\n\t\n\t    var editable = editableVNode(this, ownerID);\n\t    editable.array.splice(sizeIndex + 1);\n\t    if (newChild) {\n\t      editable.array[sizeIndex] = newChild;\n\t    }\n\t    return editable;\n\t  };\n\t\n\t  var DONE = {};\n\t\n\t  function iterateList(list, reverse) {\n\t    var left = list._origin;\n\t    var right = list._capacity;\n\t    var tailPos = getTailOffset(right);\n\t    var tail = list._tail;\n\t\n\t    return iterateNodeOrLeaf(list._root, list._level, 0);\n\t\n\t    function iterateNodeOrLeaf(node, level, offset) {\n\t      return level === 0 ? iterateLeaf(node, offset) : iterateNode(node, level, offset);\n\t    }\n\t\n\t    function iterateLeaf(node, offset) {\n\t      var array = offset === tailPos ? tail && tail.array : node && node.array;\n\t      var from = offset > left ? 0 : left - offset;\n\t      var to = right - offset;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function () {\n\t        if (from === to) {\n\t          return DONE;\n\t        }\n\t        var idx = reverse ? --to : from++;\n\t        return array && array[idx];\n\t      };\n\t    }\n\t\n\t    function iterateNode(node, level, offset) {\n\t      var values;\n\t      var array = node && node.array;\n\t      var from = offset > left ? 0 : left - offset >> level;\n\t      var to = (right - offset >> level) + 1;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function () {\n\t        do {\n\t          if (values) {\n\t            var value = values();\n\t            if (value !== DONE) {\n\t              return value;\n\t            }\n\t            values = null;\n\t          }\n\t          if (from === to) {\n\t            return DONE;\n\t          }\n\t          var idx = reverse ? --to : from++;\n\t          values = iterateNodeOrLeaf(array && array[idx], level - SHIFT, offset + (idx << level));\n\t        } while (true);\n\t      };\n\t    }\n\t  }\n\t\n\t  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n\t    var list = Object.create(ListPrototype);\n\t    list.size = capacity - origin;\n\t    list._origin = origin;\n\t    list._capacity = capacity;\n\t    list._level = level;\n\t    list._root = root;\n\t    list._tail = tail;\n\t    list.__ownerID = ownerID;\n\t    list.__hash = hash;\n\t    list.__altered = false;\n\t    return list;\n\t  }\n\t\n\t  var EMPTY_LIST;\n\t  function emptyList() {\n\t    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n\t  }\n\t\n\t  function updateList(list, index, value) {\n\t    index = wrapIndex(list, index);\n\t\n\t    if (index !== index) {\n\t      return list;\n\t    }\n\t\n\t    if (index >= list.size || index < 0) {\n\t      return list.withMutations(function (list) {\n\t        index < 0 ? setListBounds(list, index).set(0, value) : setListBounds(list, 0, index + 1).set(index, value);\n\t      });\n\t    }\n\t\n\t    index += list._origin;\n\t\n\t    var newTail = list._tail;\n\t    var newRoot = list._root;\n\t    var didAlter = MakeRef(DID_ALTER);\n\t    if (index >= getTailOffset(list._capacity)) {\n\t      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n\t    } else {\n\t      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n\t    }\n\t\n\t    if (!didAlter.value) {\n\t      return list;\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n\t  }\n\t\n\t  function updateVNode(node, ownerID, level, index, value, didAlter) {\n\t    var idx = index >>> level & MASK;\n\t    var nodeHas = node && idx < node.array.length;\n\t    if (!nodeHas && value === undefined) {\n\t      return node;\n\t    }\n\t\n\t    var newNode;\n\t\n\t    if (level > 0) {\n\t      var lowerNode = node && node.array[idx];\n\t      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n\t      if (newLowerNode === lowerNode) {\n\t        return node;\n\t      }\n\t      newNode = editableVNode(node, ownerID);\n\t      newNode.array[idx] = newLowerNode;\n\t      return newNode;\n\t    }\n\t\n\t    if (nodeHas && node.array[idx] === value) {\n\t      return node;\n\t    }\n\t\n\t    SetRef(didAlter);\n\t\n\t    newNode = editableVNode(node, ownerID);\n\t    if (value === undefined && idx === newNode.array.length - 1) {\n\t      newNode.array.pop();\n\t    } else {\n\t      newNode.array[idx] = value;\n\t    }\n\t    return newNode;\n\t  }\n\t\n\t  function editableVNode(node, ownerID) {\n\t    if (ownerID && node && ownerID === node.ownerID) {\n\t      return node;\n\t    }\n\t    return new VNode(node ? node.array.slice() : [], ownerID);\n\t  }\n\t\n\t  function listNodeFor(list, rawIndex) {\n\t    if (rawIndex >= getTailOffset(list._capacity)) {\n\t      return list._tail;\n\t    }\n\t    if (rawIndex < 1 << list._level + SHIFT) {\n\t      var node = list._root;\n\t      var level = list._level;\n\t      while (node && level > 0) {\n\t        node = node.array[rawIndex >>> level & MASK];\n\t        level -= SHIFT;\n\t      }\n\t      return node;\n\t    }\n\t  }\n\t\n\t  function setListBounds(list, begin, end) {\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      end = end | 0;\n\t    }\n\t    var owner = list.__ownerID || new OwnerID();\n\t    var oldOrigin = list._origin;\n\t    var oldCapacity = list._capacity;\n\t    var newOrigin = oldOrigin + begin;\n\t    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n\t    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n\t      return list;\n\t    }\n\t\n\t    // If it's going to end after it starts, it's empty.\n\t    if (newOrigin >= newCapacity) {\n\t      return list.clear();\n\t    }\n\t\n\t    var newLevel = list._level;\n\t    var newRoot = list._root;\n\t\n\t    // New origin might need creating a higher root.\n\t    var offsetShift = 0;\n\t    while (newOrigin + offsetShift < 0) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t      offsetShift += 1 << newLevel;\n\t    }\n\t    if (offsetShift) {\n\t      newOrigin += offsetShift;\n\t      oldOrigin += offsetShift;\n\t      newCapacity += offsetShift;\n\t      oldCapacity += offsetShift;\n\t    }\n\t\n\t    var oldTailOffset = getTailOffset(oldCapacity);\n\t    var newTailOffset = getTailOffset(newCapacity);\n\t\n\t    // New size might need creating a higher root.\n\t    while (newTailOffset >= 1 << newLevel + SHIFT) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t    }\n\t\n\t    // Locate or create the new tail.\n\t    var oldTail = list._tail;\n\t    var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\t\n\t    // Merge Tail into tree.\n\t    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n\t      newRoot = editableVNode(newRoot, owner);\n\t      var node = newRoot;\n\t      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n\t        var idx = oldTailOffset >>> level & MASK;\n\t        node = node.array[idx] = editableVNode(node.array[idx], owner);\n\t      }\n\t      node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;\n\t    }\n\t\n\t    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n\t    if (newCapacity < oldCapacity) {\n\t      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n\t    }\n\t\n\t    // If the new origin is within the tail, then we do not need a root.\n\t    if (newOrigin >= newTailOffset) {\n\t      newOrigin -= newTailOffset;\n\t      newCapacity -= newTailOffset;\n\t      newLevel = SHIFT;\n\t      newRoot = null;\n\t      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\t\n\t      // Otherwise, if the root has been trimmed, garbage collect.\n\t    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n\t      offsetShift = 0;\n\t\n\t      // Identify the new top root node of the subtree of the old root.\n\t      while (newRoot) {\n\t        var beginIndex = newOrigin >>> newLevel & MASK;\n\t        if (beginIndex !== newTailOffset >>> newLevel & MASK) {\n\t          break;\n\t        }\n\t        if (beginIndex) {\n\t          offsetShift += (1 << newLevel) * beginIndex;\n\t        }\n\t        newLevel -= SHIFT;\n\t        newRoot = newRoot.array[beginIndex];\n\t      }\n\t\n\t      // Trim the new sides of the new root.\n\t      if (newRoot && newOrigin > oldOrigin) {\n\t        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n\t      }\n\t      if (newRoot && newTailOffset < oldTailOffset) {\n\t        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n\t      }\n\t      if (offsetShift) {\n\t        newOrigin -= offsetShift;\n\t        newCapacity -= offsetShift;\n\t      }\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list.size = newCapacity - newOrigin;\n\t      list._origin = newOrigin;\n\t      list._capacity = newCapacity;\n\t      list._level = newLevel;\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n\t  }\n\t\n\t  function mergeIntoListWith(list, merger, iterables) {\n\t    var iters = [];\n\t    var maxSize = 0;\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = IndexedIterable(value);\n\t      if (iter.size > maxSize) {\n\t        maxSize = iter.size;\n\t      }\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function (v) {\n\t          return fromJS(v);\n\t        });\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    if (maxSize > list.size) {\n\t      list = list.setSize(maxSize);\n\t    }\n\t    return mergeIntoCollectionWith(list, merger, iters);\n\t  }\n\t\n\t  function getTailOffset(size) {\n\t    return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;\n\t  }\n\t\n\t  createClass(OrderedMap, Map);\n\t\n\t  // @pragma Construction\n\t\n\t  function OrderedMap(value) {\n\t    return value === null || value === undefined ? emptyOrderedMap() : isOrderedMap(value) ? value : emptyOrderedMap().withMutations(function (map) {\n\t      var iter = KeyedIterable(value);\n\t      assertNotInfinite(iter.size);\n\t      iter.forEach(function (v, k) {\n\t        return map.set(k, v);\n\t      });\n\t    });\n\t  }\n\t\n\t  OrderedMap.of = function () /*...values*/{\n\t    return this(arguments);\n\t  };\n\t\n\t  OrderedMap.prototype.toString = function () {\n\t    return this.__toString('OrderedMap {', '}');\n\t  };\n\t\n\t  // @pragma Access\n\t\n\t  OrderedMap.prototype.get = function (k, notSetValue) {\n\t    var index = this._map.get(k);\n\t    return index !== undefined ? this._list.get(index)[1] : notSetValue;\n\t  };\n\t\n\t  // @pragma Modification\n\t\n\t  OrderedMap.prototype.clear = function () {\n\t    if (this.size === 0) {\n\t      return this;\n\t    }\n\t    if (this.__ownerID) {\n\t      this.size = 0;\n\t      this._map.clear();\n\t      this._list.clear();\n\t      return this;\n\t    }\n\t    return emptyOrderedMap();\n\t  };\n\t\n\t  OrderedMap.prototype.set = function (k, v) {\n\t    return updateOrderedMap(this, k, v);\n\t  };\n\t\n\t  OrderedMap.prototype.remove = function (k) {\n\t    return updateOrderedMap(this, k, NOT_SET);\n\t  };\n\t\n\t  OrderedMap.prototype.wasAltered = function () {\n\t    return this._map.wasAltered() || this._list.wasAltered();\n\t  };\n\t\n\t  OrderedMap.prototype.__iterate = function (fn, reverse) {\n\t    var this$0 = this;\n\t    return this._list.__iterate(function (entry) {\n\t      return entry && fn(entry[1], entry[0], this$0);\n\t    }, reverse);\n\t  };\n\t\n\t  OrderedMap.prototype.__iterator = function (type, reverse) {\n\t    return this._list.fromEntrySeq().__iterator(type, reverse);\n\t  };\n\t\n\t  OrderedMap.prototype.__ensureOwner = function (ownerID) {\n\t    if (ownerID === this.__ownerID) {\n\t      return this;\n\t    }\n\t    var newMap = this._map.__ensureOwner(ownerID);\n\t    var newList = this._list.__ensureOwner(ownerID);\n\t    if (!ownerID) {\n\t      this.__ownerID = ownerID;\n\t      this._map = newMap;\n\t      this._list = newList;\n\t      return this;\n\t    }\n\t    return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n\t  };\n\t\n\t  function isOrderedMap(maybeOrderedMap) {\n\t    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n\t  }\n\t\n\t  OrderedMap.isOrderedMap = isOrderedMap;\n\t\n\t  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n\t  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\t\n\t  function makeOrderedMap(map, list, ownerID, hash) {\n\t    var omap = Object.create(OrderedMap.prototype);\n\t    omap.size = map ? map.size : 0;\n\t    omap._map = map;\n\t    omap._list = list;\n\t    omap.__ownerID = ownerID;\n\t    omap.__hash = hash;\n\t    return omap;\n\t  }\n\t\n\t  var EMPTY_ORDERED_MAP;\n\t  function emptyOrderedMap() {\n\t    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n\t  }\n\t\n\t  function updateOrderedMap(omap, k, v) {\n\t    var map = omap._map;\n\t    var list = omap._list;\n\t    var i = map.get(k);\n\t    var has = i !== undefined;\n\t    var newMap;\n\t    var newList;\n\t    if (v === NOT_SET) {\n\t      // removed\n\t      if (!has) {\n\t        return omap;\n\t      }\n\t      if (list.size >= SIZE && list.size >= map.size * 2) {\n\t        newList = list.filter(function (entry, idx) {\n\t          return entry !== undefined && i !== idx;\n\t        });\n\t        newMap = newList.toKeyedSeq().map(function (entry) {\n\t          return entry[0];\n\t        }).flip().toMap();\n\t        if (omap.__ownerID) {\n\t          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n\t        }\n\t      } else {\n\t        newMap = map.remove(k);\n\t        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n\t      }\n\t    } else {\n\t      if (has) {\n\t        if (v === list.get(i)[1]) {\n\t          return omap;\n\t        }\n\t        newMap = map;\n\t        newList = list.set(i, [k, v]);\n\t      } else {\n\t        newMap = map.set(k, list.size);\n\t        newList = list.set(list.size, [k, v]);\n\t      }\n\t    }\n\t    if (omap.__ownerID) {\n\t      omap.size = newMap.size;\n\t      omap._map = newMap;\n\t      omap._list = newList;\n\t      omap.__hash = undefined;\n\t      return omap;\n\t    }\n\t    return makeOrderedMap(newMap, newList);\n\t  }\n\t\n\t  createClass(ToKeyedSequence, KeyedSeq);\n\t  function ToKeyedSequence(indexed, useKeys) {\n\t    this._iter = indexed;\n\t    this._useKeys = useKeys;\n\t    this.size = indexed.size;\n\t  }\n\t\n\t  ToKeyedSequence.prototype.get = function (key, notSetValue) {\n\t    return this._iter.get(key, notSetValue);\n\t  };\n\t\n\t  ToKeyedSequence.prototype.has = function (key) {\n\t    return this._iter.has(key);\n\t  };\n\t\n\t  ToKeyedSequence.prototype.valueSeq = function () {\n\t    return this._iter.valueSeq();\n\t  };\n\t\n\t  ToKeyedSequence.prototype.reverse = function () {\n\t    var this$0 = this;\n\t    var reversedSequence = reverseFactory(this, true);\n\t    if (!this._useKeys) {\n\t      reversedSequence.valueSeq = function () {\n\t        return this$0._iter.toSeq().reverse();\n\t      };\n\t    }\n\t    return reversedSequence;\n\t  };\n\t\n\t  ToKeyedSequence.prototype.map = function (mapper, context) {\n\t    var this$0 = this;\n\t    var mappedSequence = mapFactory(this, mapper, context);\n\t    if (!this._useKeys) {\n\t      mappedSequence.valueSeq = function () {\n\t        return this$0._iter.toSeq().map(mapper, context);\n\t      };\n\t    }\n\t    return mappedSequence;\n\t  };\n\t\n\t  ToKeyedSequence.prototype.__iterate = function (fn, reverse) {\n\t    var this$0 = this;\n\t    var ii;\n\t    return this._iter.__iterate(this._useKeys ? function (v, k) {\n\t      return fn(v, k, this$0);\n\t    } : (ii = reverse ? resolveSize(this) : 0, function (v) {\n\t      return fn(v, reverse ? --ii : ii++, this$0);\n\t    }), reverse);\n\t  };\n\t\n\t  ToKeyedSequence.prototype.__iterator = function (type, reverse) {\n\t    if (this._useKeys) {\n\t      return this._iter.__iterator(type, reverse);\n\t    }\n\t    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t    var ii = reverse ? resolveSize(this) : 0;\n\t    return new Iterator(function () {\n\t      var step = iterator.next();\n\t      return step.done ? step : iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n\t    });\n\t  };\n\t\n\t  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t  createClass(ToIndexedSequence, IndexedSeq);\n\t  function ToIndexedSequence(iter) {\n\t    this._iter = iter;\n\t    this.size = iter.size;\n\t  }\n\t\n\t  ToIndexedSequence.prototype.includes = function (value) {\n\t    return this._iter.includes(value);\n\t  };\n\t\n\t  ToIndexedSequence.prototype.__iterate = function (fn, reverse) {\n\t    var this$0 = this;\n\t    var iterations = 0;\n\t    return this._iter.__iterate(function (v) {\n\t      return fn(v, iterations++, this$0);\n\t    }, reverse);\n\t  };\n\t\n\t  ToIndexedSequence.prototype.__iterator = function (type, reverse) {\n\t    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t    var iterations = 0;\n\t    return new Iterator(function () {\n\t      var step = iterator.next();\n\t      return step.done ? step : iteratorValue(type, iterations++, step.value, step);\n\t    });\n\t  };\n\t\n\t  createClass(ToSetSequence, SetSeq);\n\t  function ToSetSequence(iter) {\n\t    this._iter = iter;\n\t    this.size = iter.size;\n\t  }\n\t\n\t  ToSetSequence.prototype.has = function (key) {\n\t    return this._iter.includes(key);\n\t  };\n\t\n\t  ToSetSequence.prototype.__iterate = function (fn, reverse) {\n\t    var this$0 = this;\n\t    return this._iter.__iterate(function (v) {\n\t      return fn(v, v, this$0);\n\t    }, reverse);\n\t  };\n\t\n\t  ToSetSequence.prototype.__iterator = function (type, reverse) {\n\t    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t    return new Iterator(function () {\n\t      var step = iterator.next();\n\t      return step.done ? step : iteratorValue(type, step.value, step.value, step);\n\t    });\n\t  };\n\t\n\t  createClass(FromEntriesSequence, KeyedSeq);\n\t  function FromEntriesSequence(entries) {\n\t    this._iter = entries;\n\t    this.size = entries.size;\n\t  }\n\t\n\t  FromEntriesSequence.prototype.entrySeq = function () {\n\t    return this._iter.toSeq();\n\t  };\n\t\n\t  FromEntriesSequence.prototype.__iterate = function (fn, reverse) {\n\t    var this$0 = this;\n\t    return this._iter.__iterate(function (entry) {\n\t      // Check if entry exists first so array access doesn't throw for holes\n\t      // in the parent iteration.\n\t      if (entry) {\n\t        validateEntry(entry);\n\t        var indexedIterable = isIterable(entry);\n\t        return fn(indexedIterable ? entry.get(1) : entry[1], indexedIterable ? entry.get(0) : entry[0], this$0);\n\t      }\n\t    }, reverse);\n\t  };\n\t\n\t  FromEntriesSequence.prototype.__iterator = function (type, reverse) {\n\t    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t    return new Iterator(function () {\n\t      while (true) {\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        // Check if entry exists first so array access doesn't throw for holes\n\t        // in the parent iteration.\n\t        if (entry) {\n\t          validateEntry(entry);\n\t          var indexedIterable = isIterable(entry);\n\t          return iteratorValue(type, indexedIterable ? entry.get(0) : entry[0], indexedIterable ? entry.get(1) : entry[1], step);\n\t        }\n\t      }\n\t    });\n\t  };\n\t\n\t  ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;\n\t\n\t  function flipFactory(iterable) {\n\t    var flipSequence = makeSequence(iterable);\n\t    flipSequence._iter = iterable;\n\t    flipSequence.size = iterable.size;\n\t    flipSequence.flip = function () {\n\t      return iterable;\n\t    };\n\t    flipSequence.reverse = function () {\n\t      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n\t      reversedSequence.flip = function () {\n\t        return iterable.reverse();\n\t      };\n\t      return reversedSequence;\n\t    };\n\t    flipSequence.has = function (key) {\n\t      return iterable.includes(key);\n\t    };\n\t    flipSequence.includes = function (key) {\n\t      return iterable.has(key);\n\t    };\n\t    flipSequence.cacheResult = cacheResultThrough;\n\t    flipSequence.__iterateUncached = function (fn, reverse) {\n\t      var this$0 = this;\n\t      return iterable.__iterate(function (v, k) {\n\t        return fn(k, v, this$0) !== false;\n\t      }, reverse);\n\t    };\n\t    flipSequence.__iteratorUncached = function (type, reverse) {\n\t      if (type === ITERATE_ENTRIES) {\n\t        var iterator = iterable.__iterator(type, reverse);\n\t        return new Iterator(function () {\n\t          var step = iterator.next();\n\t          if (!step.done) {\n\t            var k = step.value[0];\n\t            step.value[0] = step.value[1];\n\t            step.value[1] = k;\n\t          }\n\t          return step;\n\t        });\n\t      }\n\t      return iterable.__iterator(type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES, reverse);\n\t    };\n\t    return flipSequence;\n\t  }\n\t\n\t  function mapFactory(iterable, mapper, context) {\n\t    var mappedSequence = makeSequence(iterable);\n\t    mappedSequence.size = iterable.size;\n\t    mappedSequence.has = function (key) {\n\t      return iterable.has(key);\n\t    };\n\t    mappedSequence.get = function (key, notSetValue) {\n\t      var v = iterable.get(key, NOT_SET);\n\t      return v === NOT_SET ? notSetValue : mapper.call(context, v, key, iterable);\n\t    };\n\t    mappedSequence.__iterateUncached = function (fn, reverse) {\n\t      var this$0 = this;\n\t      return iterable.__iterate(function (v, k, c) {\n\t        return fn(mapper.call(context, v, k, c), k, this$0) !== false;\n\t      }, reverse);\n\t    };\n\t    mappedSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      return new Iterator(function () {\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var key = entry[0];\n\t        return iteratorValue(type, key, mapper.call(context, entry[1], key, iterable), step);\n\t      });\n\t    };\n\t    return mappedSequence;\n\t  }\n\t\n\t  function reverseFactory(iterable, useKeys) {\n\t    var reversedSequence = makeSequence(iterable);\n\t    reversedSequence._iter = iterable;\n\t    reversedSequence.size = iterable.size;\n\t    reversedSequence.reverse = function () {\n\t      return iterable;\n\t    };\n\t    if (iterable.flip) {\n\t      reversedSequence.flip = function () {\n\t        var flipSequence = flipFactory(iterable);\n\t        flipSequence.reverse = function () {\n\t          return iterable.flip();\n\t        };\n\t        return flipSequence;\n\t      };\n\t    }\n\t    reversedSequence.get = function (key, notSetValue) {\n\t      return iterable.get(useKeys ? key : -1 - key, notSetValue);\n\t    };\n\t    reversedSequence.has = function (key) {\n\t      return iterable.has(useKeys ? key : -1 - key);\n\t    };\n\t    reversedSequence.includes = function (value) {\n\t      return iterable.includes(value);\n\t    };\n\t    reversedSequence.cacheResult = cacheResultThrough;\n\t    reversedSequence.__iterate = function (fn, reverse) {\n\t      var this$0 = this;\n\t      return iterable.__iterate(function (v, k) {\n\t        return fn(v, k, this$0);\n\t      }, !reverse);\n\t    };\n\t    reversedSequence.__iterator = function (type, reverse) {\n\t      return iterable.__iterator(type, !reverse);\n\t    };\n\t    return reversedSequence;\n\t  }\n\t\n\t  function filterFactory(iterable, predicate, context, useKeys) {\n\t    var filterSequence = makeSequence(iterable);\n\t    if (useKeys) {\n\t      filterSequence.has = function (key) {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n\t      };\n\t      filterSequence.get = function (key, notSetValue) {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && predicate.call(context, v, key, iterable) ? v : notSetValue;\n\t      };\n\t    }\n\t    filterSequence.__iterateUncached = function (fn, reverse) {\n\t      var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function (v, k, c) {\n\t        if (predicate.call(context, v, k, c)) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t    filterSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterations = 0;\n\t      return new Iterator(function () {\n\t        while (true) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          var entry = step.value;\n\t          var key = entry[0];\n\t          var value = entry[1];\n\t          if (predicate.call(context, value, key, iterable)) {\n\t            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n\t          }\n\t        }\n\t      });\n\t    };\n\t    return filterSequence;\n\t  }\n\t\n\t  function countByFactory(iterable, grouper, context) {\n\t    var groups = Map().asMutable();\n\t    iterable.__iterate(function (v, k) {\n\t      groups.update(grouper.call(context, v, k, iterable), 0, function (a) {\n\t        return a + 1;\n\t      });\n\t    });\n\t    return groups.asImmutable();\n\t  }\n\t\n\t  function groupByFactory(iterable, grouper, context) {\n\t    var isKeyedIter = isKeyed(iterable);\n\t    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n\t    iterable.__iterate(function (v, k) {\n\t      groups.update(grouper.call(context, v, k, iterable), function (a) {\n\t        return a = a || [], a.push(isKeyedIter ? [k, v] : v), a;\n\t      });\n\t    });\n\t    var coerce = iterableClass(iterable);\n\t    return groups.map(function (arr) {\n\t      return reify(iterable, coerce(arr));\n\t    });\n\t  }\n\t\n\t  function sliceFactory(iterable, begin, end, useKeys) {\n\t    var originalSize = iterable.size;\n\t\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      if (end === Infinity) {\n\t        end = originalSize;\n\t      } else {\n\t        end = end | 0;\n\t      }\n\t    }\n\t\n\t    if (wholeSlice(begin, end, originalSize)) {\n\t      return iterable;\n\t    }\n\t\n\t    var resolvedBegin = resolveBegin(begin, originalSize);\n\t    var resolvedEnd = resolveEnd(end, originalSize);\n\t\n\t    // begin or end will be NaN if they were provided as negative numbers and\n\t    // this iterable's size is unknown. In that case, cache first so there is\n\t    // a known size and these do not resolve to NaN.\n\t    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n\t      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n\t    }\n\t\n\t    // Note: resolvedEnd is undefined when the original sequence's length is\n\t    // unknown and this slice did not supply an end and should contain all\n\t    // elements after resolvedBegin.\n\t    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n\t    var resolvedSize = resolvedEnd - resolvedBegin;\n\t    var sliceSize;\n\t    if (resolvedSize === resolvedSize) {\n\t      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n\t    }\n\t\n\t    var sliceSeq = makeSequence(iterable);\n\t\n\t    // If iterable.size is undefined, the size of the realized sliceSeq is\n\t    // unknown at this point unless the number of items to slice is 0\n\t    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\t\n\t    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n\t      sliceSeq.get = function (index, notSetValue) {\n\t        index = wrapIndex(this, index);\n\t        return index >= 0 && index < sliceSize ? iterable.get(index + resolvedBegin, notSetValue) : notSetValue;\n\t      };\n\t    }\n\t\n\t    sliceSeq.__iterateUncached = function (fn, reverse) {\n\t      var this$0 = this;\n\t      if (sliceSize === 0) {\n\t        return 0;\n\t      }\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var skipped = 0;\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function (v, k) {\n\t        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0) !== false && iterations !== sliceSize;\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t\n\t    sliceSeq.__iteratorUncached = function (type, reverse) {\n\t      if (sliceSize !== 0 && reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      // Don't bother instantiating parent iterator if taking 0.\n\t      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n\t      var skipped = 0;\n\t      var iterations = 0;\n\t      return new Iterator(function () {\n\t        while (skipped++ < resolvedBegin) {\n\t          iterator.next();\n\t        }\n\t        if (++iterations > sliceSize) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (useKeys || type === ITERATE_VALUES) {\n\t          return step;\n\t        } else if (type === ITERATE_KEYS) {\n\t          return iteratorValue(type, iterations - 1, undefined, step);\n\t        } else {\n\t          return iteratorValue(type, iterations - 1, step.value[1], step);\n\t        }\n\t      });\n\t    };\n\t\n\t    return sliceSeq;\n\t  }\n\t\n\t  function takeWhileFactory(iterable, predicate, context) {\n\t    var takeSequence = makeSequence(iterable);\n\t    takeSequence.__iterateUncached = function (fn, reverse) {\n\t      var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterations = 0;\n\t      iterable.__iterate(function (v, k, c) {\n\t        return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0);\n\t      });\n\t      return iterations;\n\t    };\n\t    takeSequence.__iteratorUncached = function (type, reverse) {\n\t      var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterating = true;\n\t      return new Iterator(function () {\n\t        if (!iterating) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var k = entry[0];\n\t        var v = entry[1];\n\t        if (!predicate.call(context, v, k, this$0)) {\n\t          iterating = false;\n\t          return iteratorDone();\n\t        }\n\t        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return takeSequence;\n\t  }\n\t\n\t  function skipWhileFactory(iterable, predicate, context, useKeys) {\n\t    var skipSequence = makeSequence(iterable);\n\t    skipSequence.__iterateUncached = function (fn, reverse) {\n\t      var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function (v, k, c) {\n\t        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t    skipSequence.__iteratorUncached = function (type, reverse) {\n\t      var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var skipping = true;\n\t      var iterations = 0;\n\t      return new Iterator(function () {\n\t        var step, k, v;\n\t        do {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            if (useKeys || type === ITERATE_VALUES) {\n\t              return step;\n\t            } else if (type === ITERATE_KEYS) {\n\t              return iteratorValue(type, iterations++, undefined, step);\n\t            } else {\n\t              return iteratorValue(type, iterations++, step.value[1], step);\n\t            }\n\t          }\n\t          var entry = step.value;\n\t          k = entry[0];\n\t          v = entry[1];\n\t          skipping && (skipping = predicate.call(context, v, k, this$0));\n\t        } while (skipping);\n\t        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return skipSequence;\n\t  }\n\t\n\t  function concatFactory(iterable, values) {\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var iters = [iterable].concat(values).map(function (v) {\n\t      if (!isIterable(v)) {\n\t        v = isKeyedIterable ? keyedSeqFromValue(v) : indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n\t      } else if (isKeyedIterable) {\n\t        v = KeyedIterable(v);\n\t      }\n\t      return v;\n\t    }).filter(function (v) {\n\t      return v.size !== 0;\n\t    });\n\t\n\t    if (iters.length === 0) {\n\t      return iterable;\n\t    }\n\t\n\t    if (iters.length === 1) {\n\t      var singleton = iters[0];\n\t      if (singleton === iterable || isKeyedIterable && isKeyed(singleton) || isIndexed(iterable) && isIndexed(singleton)) {\n\t        return singleton;\n\t      }\n\t    }\n\t\n\t    var concatSeq = new ArraySeq(iters);\n\t    if (isKeyedIterable) {\n\t      concatSeq = concatSeq.toKeyedSeq();\n\t    } else if (!isIndexed(iterable)) {\n\t      concatSeq = concatSeq.toSetSeq();\n\t    }\n\t    concatSeq = concatSeq.flatten(true);\n\t    concatSeq.size = iters.reduce(function (sum, seq) {\n\t      if (sum !== undefined) {\n\t        var size = seq.size;\n\t        if (size !== undefined) {\n\t          return sum + size;\n\t        }\n\t      }\n\t    }, 0);\n\t    return concatSeq;\n\t  }\n\t\n\t  function flattenFactory(iterable, depth, useKeys) {\n\t    var flatSequence = makeSequence(iterable);\n\t    flatSequence.__iterateUncached = function (fn, reverse) {\n\t      var iterations = 0;\n\t      var stopped = false;\n\t      function flatDeep(iter, currentDepth) {\n\t        var this$0 = this;\n\t        iter.__iterate(function (v, k) {\n\t          if ((!depth || currentDepth < depth) && isIterable(v)) {\n\t            flatDeep(v, currentDepth + 1);\n\t          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n\t            stopped = true;\n\t          }\n\t          return !stopped;\n\t        }, reverse);\n\t      }\n\t      flatDeep(iterable, 0);\n\t      return iterations;\n\t    };\n\t    flatSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(type, reverse);\n\t      var stack = [];\n\t      var iterations = 0;\n\t      return new Iterator(function () {\n\t        while (iterator) {\n\t          var step = iterator.next();\n\t          if (step.done !== false) {\n\t            iterator = stack.pop();\n\t            continue;\n\t          }\n\t          var v = step.value;\n\t          if (type === ITERATE_ENTRIES) {\n\t            v = v[1];\n\t          }\n\t          if ((!depth || stack.length < depth) && isIterable(v)) {\n\t            stack.push(iterator);\n\t            iterator = v.__iterator(type, reverse);\n\t          } else {\n\t            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n\t          }\n\t        }\n\t        return iteratorDone();\n\t      });\n\t    };\n\t    return flatSequence;\n\t  }\n\t\n\t  function flatMapFactory(iterable, mapper, context) {\n\t    var coerce = iterableClass(iterable);\n\t    return iterable.toSeq().map(function (v, k) {\n\t      return coerce(mapper.call(context, v, k, iterable));\n\t    }).flatten(true);\n\t  }\n\t\n\t  function interposeFactory(iterable, separator) {\n\t    var interposedSequence = makeSequence(iterable);\n\t    interposedSequence.size = iterable.size && iterable.size * 2 - 1;\n\t    interposedSequence.__iterateUncached = function (fn, reverse) {\n\t      var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function (v, k) {\n\t        return (!iterations || fn(separator, iterations++, this$0) !== false) && fn(v, iterations++, this$0) !== false;\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t    interposedSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n\t      var iterations = 0;\n\t      var step;\n\t      return new Iterator(function () {\n\t        if (!step || iterations % 2) {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t        }\n\t        return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);\n\t      });\n\t    };\n\t    return interposedSequence;\n\t  }\n\t\n\t  function sortFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var index = 0;\n\t    var entries = iterable.toSeq().map(function (v, k) {\n\t      return [k, v, index++, mapper ? mapper(v, k, iterable) : v];\n\t    }).toArray();\n\t    entries.sort(function (a, b) {\n\t      return comparator(a[3], b[3]) || a[2] - b[2];\n\t    }).forEach(isKeyedIterable ? function (v, i) {\n\t      entries[i].length = 2;\n\t    } : function (v, i) {\n\t      entries[i] = v[1];\n\t    });\n\t    return isKeyedIterable ? KeyedSeq(entries) : isIndexed(iterable) ? IndexedSeq(entries) : SetSeq(entries);\n\t  }\n\t\n\t  function maxFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    if (mapper) {\n\t      var entry = iterable.toSeq().map(function (v, k) {\n\t        return [v, mapper(v, k, iterable)];\n\t      }).reduce(function (a, b) {\n\t        return maxCompare(comparator, a[1], b[1]) ? b : a;\n\t      });\n\t      return entry && entry[0];\n\t    } else {\n\t      return iterable.reduce(function (a, b) {\n\t        return maxCompare(comparator, a, b) ? b : a;\n\t      });\n\t    }\n\t  }\n\t\n\t  function maxCompare(comparator, a, b) {\n\t    var comp = comparator(b, a);\n\t    // b is considered the new max if the comparator declares them equal, but\n\t    // they are not equal and b is in fact a nullish value.\n\t    return comp === 0 && b !== a && (b === undefined || b === null || b !== b) || comp > 0;\n\t  }\n\t\n\t  function zipWithFactory(keyIter, zipper, iters) {\n\t    var zipSequence = makeSequence(keyIter);\n\t    zipSequence.size = new ArraySeq(iters).map(function (i) {\n\t      return i.size;\n\t    }).min();\n\t    // Note: this a generic base implementation of __iterate in terms of\n\t    // __iterator which may be more generically useful in the future.\n\t    zipSequence.__iterate = function (fn, reverse) {\n\t      /* generic:\n\t      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        iterations++;\n\t        if (fn(step.value[1], step.value[0], this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t      */\n\t      // indexed:\n\t      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        if (fn(step.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t    zipSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterators = iters.map(function (i) {\n\t        return i = Iterable(i), getIterator(reverse ? i.reverse() : i);\n\t      });\n\t      var iterations = 0;\n\t      var isDone = false;\n\t      return new Iterator(function () {\n\t        var steps;\n\t        if (!isDone) {\n\t          steps = iterators.map(function (i) {\n\t            return i.next();\n\t          });\n\t          isDone = steps.some(function (s) {\n\t            return s.done;\n\t          });\n\t        }\n\t        if (isDone) {\n\t          return iteratorDone();\n\t        }\n\t        return iteratorValue(type, iterations++, zipper.apply(null, steps.map(function (s) {\n\t          return s.value;\n\t        })));\n\t      });\n\t    };\n\t    return zipSequence;\n\t  }\n\t\n\t  // #pragma Helper Functions\n\t\n\t  function reify(iter, seq) {\n\t    return isSeq(iter) ? seq : iter.constructor(seq);\n\t  }\n\t\n\t  function validateEntry(entry) {\n\t    if (entry !== Object(entry)) {\n\t      throw new TypeError('Expected [K, V] tuple: ' + entry);\n\t    }\n\t  }\n\t\n\t  function resolveSize(iter) {\n\t    assertNotInfinite(iter.size);\n\t    return ensureSize(iter);\n\t  }\n\t\n\t  function iterableClass(iterable) {\n\t    return isKeyed(iterable) ? KeyedIterable : isIndexed(iterable) ? IndexedIterable : SetIterable;\n\t  }\n\t\n\t  function makeSequence(iterable) {\n\t    return Object.create((isKeyed(iterable) ? KeyedSeq : isIndexed(iterable) ? IndexedSeq : SetSeq).prototype);\n\t  }\n\t\n\t  function cacheResultThrough() {\n\t    if (this._iter.cacheResult) {\n\t      this._iter.cacheResult();\n\t      this.size = this._iter.size;\n\t      return this;\n\t    } else {\n\t      return Seq.prototype.cacheResult.call(this);\n\t    }\n\t  }\n\t\n\t  function defaultComparator(a, b) {\n\t    return a > b ? 1 : a < b ? -1 : 0;\n\t  }\n\t\n\t  function forceIterator(keyPath) {\n\t    var iter = getIterator(keyPath);\n\t    if (!iter) {\n\t      // Array might not be iterable in this environment, so we need a fallback\n\t      // to our wrapped type.\n\t      if (!isArrayLike(keyPath)) {\n\t        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n\t      }\n\t      iter = getIterator(Iterable(keyPath));\n\t    }\n\t    return iter;\n\t  }\n\t\n\t  createClass(Record, KeyedCollection);\n\t\n\t  function Record(defaultValues, name) {\n\t    var hasInitialized;\n\t\n\t    var RecordType = function Record(values) {\n\t      if (values instanceof RecordType) {\n\t        return values;\n\t      }\n\t      if (!(this instanceof RecordType)) {\n\t        return new RecordType(values);\n\t      }\n\t      if (!hasInitialized) {\n\t        hasInitialized = true;\n\t        var keys = Object.keys(defaultValues);\n\t        setProps(RecordTypePrototype, keys);\n\t        RecordTypePrototype.size = keys.length;\n\t        RecordTypePrototype._name = name;\n\t        RecordTypePrototype._keys = keys;\n\t        RecordTypePrototype._defaultValues = defaultValues;\n\t      }\n\t      this._map = Map(values);\n\t    };\n\t\n\t    var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n\t    RecordTypePrototype.constructor = RecordType;\n\t\n\t    return RecordType;\n\t  }\n\t\n\t  Record.prototype.toString = function () {\n\t    return this.__toString(recordName(this) + ' {', '}');\n\t  };\n\t\n\t  // @pragma Access\n\t\n\t  Record.prototype.has = function (k) {\n\t    return this._defaultValues.hasOwnProperty(k);\n\t  };\n\t\n\t  Record.prototype.get = function (k, notSetValue) {\n\t    if (!this.has(k)) {\n\t      return notSetValue;\n\t    }\n\t    var defaultVal = this._defaultValues[k];\n\t    return this._map ? this._map.get(k, defaultVal) : defaultVal;\n\t  };\n\t\n\t  // @pragma Modification\n\t\n\t  Record.prototype.clear = function () {\n\t    if (this.__ownerID) {\n\t      this._map && this._map.clear();\n\t      return this;\n\t    }\n\t    var RecordType = this.constructor;\n\t    return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n\t  };\n\t\n\t  Record.prototype.set = function (k, v) {\n\t    if (!this.has(k)) {\n\t      throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n\t    }\n\t    if (this._map && !this._map.has(k)) {\n\t      var defaultVal = this._defaultValues[k];\n\t      if (v === defaultVal) {\n\t        return this;\n\t      }\n\t    }\n\t    var newMap = this._map && this._map.set(k, v);\n\t    if (this.__ownerID || newMap === this._map) {\n\t      return this;\n\t    }\n\t    return makeRecord(this, newMap);\n\t  };\n\t\n\t  Record.prototype.remove = function (k) {\n\t    if (!this.has(k)) {\n\t      return this;\n\t    }\n\t    var newMap = this._map && this._map.remove(k);\n\t    if (this.__ownerID || newMap === this._map) {\n\t      return this;\n\t    }\n\t    return makeRecord(this, newMap);\n\t  };\n\t\n\t  Record.prototype.wasAltered = function () {\n\t    return this._map.wasAltered();\n\t  };\n\t\n\t  Record.prototype.__iterator = function (type, reverse) {\n\t    var this$0 = this;\n\t    return KeyedIterable(this._defaultValues).map(function (_, k) {\n\t      return this$0.get(k);\n\t    }).__iterator(type, reverse);\n\t  };\n\t\n\t  Record.prototype.__iterate = function (fn, reverse) {\n\t    var this$0 = this;\n\t    return KeyedIterable(this._defaultValues).map(function (_, k) {\n\t      return this$0.get(k);\n\t    }).__iterate(fn, reverse);\n\t  };\n\t\n\t  Record.prototype.__ensureOwner = function (ownerID) {\n\t    if (ownerID === this.__ownerID) {\n\t      return this;\n\t    }\n\t    var newMap = this._map && this._map.__ensureOwner(ownerID);\n\t    if (!ownerID) {\n\t      this.__ownerID = ownerID;\n\t      this._map = newMap;\n\t      return this;\n\t    }\n\t    return makeRecord(this, newMap, ownerID);\n\t  };\n\t\n\t  var RecordPrototype = Record.prototype;\n\t  RecordPrototype[DELETE] = RecordPrototype.remove;\n\t  RecordPrototype.deleteIn = RecordPrototype.removeIn = MapPrototype.removeIn;\n\t  RecordPrototype.merge = MapPrototype.merge;\n\t  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n\t  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n\t  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n\t  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n\t  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  RecordPrototype.setIn = MapPrototype.setIn;\n\t  RecordPrototype.update = MapPrototype.update;\n\t  RecordPrototype.updateIn = MapPrototype.updateIn;\n\t  RecordPrototype.withMutations = MapPrototype.withMutations;\n\t  RecordPrototype.asMutable = MapPrototype.asMutable;\n\t  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t  function makeRecord(likeRecord, map, ownerID) {\n\t    var record = Object.create(Object.getPrototypeOf(likeRecord));\n\t    record._map = map;\n\t    record.__ownerID = ownerID;\n\t    return record;\n\t  }\n\t\n\t  function recordName(record) {\n\t    return record._name || record.constructor.name || 'Record';\n\t  }\n\t\n\t  function setProps(prototype, names) {\n\t    try {\n\t      names.forEach(setProp.bind(undefined, prototype));\n\t    } catch (error) {\n\t      // Object.defineProperty failed. Probably IE8.\n\t    }\n\t  }\n\t\n\t  function setProp(prototype, name) {\n\t    Object.defineProperty(prototype, name, {\n\t      get: function get() {\n\t        return this.get(name);\n\t      },\n\t      set: function set(value) {\n\t        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n\t        this.set(name, value);\n\t      }\n\t    });\n\t  }\n\t\n\t  createClass(Set, SetCollection);\n\t\n\t  // @pragma Construction\n\t\n\t  function Set(value) {\n\t    return value === null || value === undefined ? emptySet() : isSet(value) && !isOrdered(value) ? value : emptySet().withMutations(function (set) {\n\t      var iter = SetIterable(value);\n\t      assertNotInfinite(iter.size);\n\t      iter.forEach(function (v) {\n\t        return set.add(v);\n\t      });\n\t    });\n\t  }\n\t\n\t  Set.of = function () /*...values*/{\n\t    return this(arguments);\n\t  };\n\t\n\t  Set.fromKeys = function (value) {\n\t    return this(KeyedIterable(value).keySeq());\n\t  };\n\t\n\t  Set.prototype.toString = function () {\n\t    return this.__toString('Set {', '}');\n\t  };\n\t\n\t  // @pragma Access\n\t\n\t  Set.prototype.has = function (value) {\n\t    return this._map.has(value);\n\t  };\n\t\n\t  // @pragma Modification\n\t\n\t  Set.prototype.add = function (value) {\n\t    return updateSet(this, this._map.set(value, true));\n\t  };\n\t\n\t  Set.prototype.remove = function (value) {\n\t    return updateSet(this, this._map.remove(value));\n\t  };\n\t\n\t  Set.prototype.clear = function () {\n\t    return updateSet(this, this._map.clear());\n\t  };\n\t\n\t  // @pragma Composition\n\t\n\t  Set.prototype.union = function () {\n\t    var iters = SLICE$0.call(arguments, 0);\n\t    iters = iters.filter(function (x) {\n\t      return x.size !== 0;\n\t    });\n\t    if (iters.length === 0) {\n\t      return this;\n\t    }\n\t    if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n\t      return this.constructor(iters[0]);\n\t    }\n\t    return this.withMutations(function (set) {\n\t      for (var ii = 0; ii < iters.length; ii++) {\n\t        SetIterable(iters[ii]).forEach(function (value) {\n\t          return set.add(value);\n\t        });\n\t      }\n\t    });\n\t  };\n\t\n\t  Set.prototype.intersect = function () {\n\t    var iters = SLICE$0.call(arguments, 0);\n\t    if (iters.length === 0) {\n\t      return this;\n\t    }\n\t    iters = iters.map(function (iter) {\n\t      return SetIterable(iter);\n\t    });\n\t    var originalSet = this;\n\t    return this.withMutations(function (set) {\n\t      originalSet.forEach(function (value) {\n\t        if (!iters.every(function (iter) {\n\t          return iter.includes(value);\n\t        })) {\n\t          set.remove(value);\n\t        }\n\t      });\n\t    });\n\t  };\n\t\n\t  Set.prototype.subtract = function () {\n\t    var iters = SLICE$0.call(arguments, 0);\n\t    if (iters.length === 0) {\n\t      return this;\n\t    }\n\t    iters = iters.map(function (iter) {\n\t      return SetIterable(iter);\n\t    });\n\t    var originalSet = this;\n\t    return this.withMutations(function (set) {\n\t      originalSet.forEach(function (value) {\n\t        if (iters.some(function (iter) {\n\t          return iter.includes(value);\n\t        })) {\n\t          set.remove(value);\n\t        }\n\t      });\n\t    });\n\t  };\n\t\n\t  Set.prototype.merge = function () {\n\t    return this.union.apply(this, arguments);\n\t  };\n\t\n\t  Set.prototype.mergeWith = function (merger) {\n\t    var iters = SLICE$0.call(arguments, 1);\n\t    return this.union.apply(this, iters);\n\t  };\n\t\n\t  Set.prototype.sort = function (comparator) {\n\t    // Late binding\n\t    return OrderedSet(sortFactory(this, comparator));\n\t  };\n\t\n\t  Set.prototype.sortBy = function (mapper, comparator) {\n\t    // Late binding\n\t    return OrderedSet(sortFactory(this, comparator, mapper));\n\t  };\n\t\n\t  Set.prototype.wasAltered = function () {\n\t    return this._map.wasAltered();\n\t  };\n\t\n\t  Set.prototype.__iterate = function (fn, reverse) {\n\t    var this$0 = this;\n\t    return this._map.__iterate(function (_, k) {\n\t      return fn(k, k, this$0);\n\t    }, reverse);\n\t  };\n\t\n\t  Set.prototype.__iterator = function (type, reverse) {\n\t    return this._map.map(function (_, k) {\n\t      return k;\n\t    }).__iterator(type, reverse);\n\t  };\n\t\n\t  Set.prototype.__ensureOwner = function (ownerID) {\n\t    if (ownerID === this.__ownerID) {\n\t      return this;\n\t    }\n\t    var newMap = this._map.__ensureOwner(ownerID);\n\t    if (!ownerID) {\n\t      this.__ownerID = ownerID;\n\t      this._map = newMap;\n\t      return this;\n\t    }\n\t    return this.__make(newMap, ownerID);\n\t  };\n\t\n\t  function isSet(maybeSet) {\n\t    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n\t  }\n\t\n\t  Set.isSet = isSet;\n\t\n\t  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\t\n\t  var SetPrototype = Set.prototype;\n\t  SetPrototype[IS_SET_SENTINEL] = true;\n\t  SetPrototype[DELETE] = SetPrototype.remove;\n\t  SetPrototype.mergeDeep = SetPrototype.merge;\n\t  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n\t  SetPrototype.withMutations = MapPrototype.withMutations;\n\t  SetPrototype.asMutable = MapPrototype.asMutable;\n\t  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t  SetPrototype.__empty = emptySet;\n\t  SetPrototype.__make = makeSet;\n\t\n\t  function updateSet(set, newMap) {\n\t    if (set.__ownerID) {\n\t      set.size = newMap.size;\n\t      set._map = newMap;\n\t      return set;\n\t    }\n\t    return newMap === set._map ? set : newMap.size === 0 ? set.__empty() : set.__make(newMap);\n\t  }\n\t\n\t  function makeSet(map, ownerID) {\n\t    var set = Object.create(SetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_SET;\n\t  function emptySet() {\n\t    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n\t  }\n\t\n\t  createClass(OrderedSet, Set);\n\t\n\t  // @pragma Construction\n\t\n\t  function OrderedSet(value) {\n\t    return value === null || value === undefined ? emptyOrderedSet() : isOrderedSet(value) ? value : emptyOrderedSet().withMutations(function (set) {\n\t      var iter = SetIterable(value);\n\t      assertNotInfinite(iter.size);\n\t      iter.forEach(function (v) {\n\t        return set.add(v);\n\t      });\n\t    });\n\t  }\n\t\n\t  OrderedSet.of = function () /*...values*/{\n\t    return this(arguments);\n\t  };\n\t\n\t  OrderedSet.fromKeys = function (value) {\n\t    return this(KeyedIterable(value).keySeq());\n\t  };\n\t\n\t  OrderedSet.prototype.toString = function () {\n\t    return this.__toString('OrderedSet {', '}');\n\t  };\n\t\n\t  function isOrderedSet(maybeOrderedSet) {\n\t    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n\t  }\n\t\n\t  OrderedSet.isOrderedSet = isOrderedSet;\n\t\n\t  var OrderedSetPrototype = OrderedSet.prototype;\n\t  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t  OrderedSetPrototype.__empty = emptyOrderedSet;\n\t  OrderedSetPrototype.__make = makeOrderedSet;\n\t\n\t  function makeOrderedSet(map, ownerID) {\n\t    var set = Object.create(OrderedSetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_ORDERED_SET;\n\t  function emptyOrderedSet() {\n\t    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n\t  }\n\t\n\t  createClass(Stack, IndexedCollection);\n\t\n\t  // @pragma Construction\n\t\n\t  function Stack(value) {\n\t    return value === null || value === undefined ? emptyStack() : isStack(value) ? value : emptyStack().unshiftAll(value);\n\t  }\n\t\n\t  Stack.of = function () /*...values*/{\n\t    return this(arguments);\n\t  };\n\t\n\t  Stack.prototype.toString = function () {\n\t    return this.__toString('Stack [', ']');\n\t  };\n\t\n\t  // @pragma Access\n\t\n\t  Stack.prototype.get = function (index, notSetValue) {\n\t    var head = this._head;\n\t    index = wrapIndex(this, index);\n\t    while (head && index--) {\n\t      head = head.next;\n\t    }\n\t    return head ? head.value : notSetValue;\n\t  };\n\t\n\t  Stack.prototype.peek = function () {\n\t    return this._head && this._head.value;\n\t  };\n\t\n\t  // @pragma Modification\n\t\n\t  Stack.prototype.push = function () /*...values*/{\n\t    if (arguments.length === 0) {\n\t      return this;\n\t    }\n\t    var newSize = this.size + arguments.length;\n\t    var head = this._head;\n\t    for (var ii = arguments.length - 1; ii >= 0; ii--) {\n\t      head = {\n\t        value: arguments[ii],\n\t        next: head\n\t      };\n\t    }\n\t    if (this.__ownerID) {\n\t      this.size = newSize;\n\t      this._head = head;\n\t      this.__hash = undefined;\n\t      this.__altered = true;\n\t      return this;\n\t    }\n\t    return makeStack(newSize, head);\n\t  };\n\t\n\t  Stack.prototype.pushAll = function (iter) {\n\t    iter = IndexedIterable(iter);\n\t    if (iter.size === 0) {\n\t      return this;\n\t    }\n\t    assertNotInfinite(iter.size);\n\t    var newSize = this.size;\n\t    var head = this._head;\n\t    iter.reverse().forEach(function (value) {\n\t      newSize++;\n\t      head = {\n\t        value: value,\n\t        next: head\n\t      };\n\t    });\n\t    if (this.__ownerID) {\n\t      this.size = newSize;\n\t      this._head = head;\n\t      this.__hash = undefined;\n\t      this.__altered = true;\n\t      return this;\n\t    }\n\t    return makeStack(newSize, head);\n\t  };\n\t\n\t  Stack.prototype.pop = function () {\n\t    return this.slice(1);\n\t  };\n\t\n\t  Stack.prototype.unshift = function () /*...values*/{\n\t    return this.push.apply(this, arguments);\n\t  };\n\t\n\t  Stack.prototype.unshiftAll = function (iter) {\n\t    return this.pushAll(iter);\n\t  };\n\t\n\t  Stack.prototype.shift = function () {\n\t    return this.pop.apply(this, arguments);\n\t  };\n\t\n\t  Stack.prototype.clear = function () {\n\t    if (this.size === 0) {\n\t      return this;\n\t    }\n\t    if (this.__ownerID) {\n\t      this.size = 0;\n\t      this._head = undefined;\n\t      this.__hash = undefined;\n\t      this.__altered = true;\n\t      return this;\n\t    }\n\t    return emptyStack();\n\t  };\n\t\n\t  Stack.prototype.slice = function (begin, end) {\n\t    if (wholeSlice(begin, end, this.size)) {\n\t      return this;\n\t    }\n\t    var resolvedBegin = resolveBegin(begin, this.size);\n\t    var resolvedEnd = resolveEnd(end, this.size);\n\t    if (resolvedEnd !== this.size) {\n\t      // super.slice(begin, end);\n\t      return IndexedCollection.prototype.slice.call(this, begin, end);\n\t    }\n\t    var newSize = this.size - resolvedBegin;\n\t    var head = this._head;\n\t    while (resolvedBegin--) {\n\t      head = head.next;\n\t    }\n\t    if (this.__ownerID) {\n\t      this.size = newSize;\n\t      this._head = head;\n\t      this.__hash = undefined;\n\t      this.__altered = true;\n\t      return this;\n\t    }\n\t    return makeStack(newSize, head);\n\t  };\n\t\n\t  // @pragma Mutability\n\t\n\t  Stack.prototype.__ensureOwner = function (ownerID) {\n\t    if (ownerID === this.__ownerID) {\n\t      return this;\n\t    }\n\t    if (!ownerID) {\n\t      this.__ownerID = ownerID;\n\t      this.__altered = false;\n\t      return this;\n\t    }\n\t    return makeStack(this.size, this._head, ownerID, this.__hash);\n\t  };\n\t\n\t  // @pragma Iteration\n\t\n\t  Stack.prototype.__iterate = function (fn, reverse) {\n\t    if (reverse) {\n\t      return this.reverse().__iterate(fn);\n\t    }\n\t    var iterations = 0;\n\t    var node = this._head;\n\t    while (node) {\n\t      if (fn(node.value, iterations++, this) === false) {\n\t        break;\n\t      }\n\t      node = node.next;\n\t    }\n\t    return iterations;\n\t  };\n\t\n\t  Stack.prototype.__iterator = function (type, reverse) {\n\t    if (reverse) {\n\t      return this.reverse().__iterator(type);\n\t    }\n\t    var iterations = 0;\n\t    var node = this._head;\n\t    return new Iterator(function () {\n\t      if (node) {\n\t        var value = node.value;\n\t        node = node.next;\n\t        return iteratorValue(type, iterations++, value);\n\t      }\n\t      return iteratorDone();\n\t    });\n\t  };\n\t\n\t  function isStack(maybeStack) {\n\t    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n\t  }\n\t\n\t  Stack.isStack = isStack;\n\t\n\t  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\t\n\t  var StackPrototype = Stack.prototype;\n\t  StackPrototype[IS_STACK_SENTINEL] = true;\n\t  StackPrototype.withMutations = MapPrototype.withMutations;\n\t  StackPrototype.asMutable = MapPrototype.asMutable;\n\t  StackPrototype.asImmutable = MapPrototype.asImmutable;\n\t  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t  function makeStack(size, head, ownerID, hash) {\n\t    var map = Object.create(StackPrototype);\n\t    map.size = size;\n\t    map._head = head;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_STACK;\n\t  function emptyStack() {\n\t    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n\t  }\n\t\n\t  /**\n\t   * Contributes additional methods to a constructor\n\t   */\n\t  function mixin(ctor, methods) {\n\t    var keyCopier = function keyCopier(key) {\n\t      ctor.prototype[key] = methods[key];\n\t    };\n\t    Object.keys(methods).forEach(keyCopier);\n\t    Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n\t    return ctor;\n\t  }\n\t\n\t  Iterable.Iterator = Iterator;\n\t\n\t  mixin(Iterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toArray: function toArray() {\n\t      assertNotInfinite(this.size);\n\t      var array = new Array(this.size || 0);\n\t      this.valueSeq().__iterate(function (v, i) {\n\t        array[i] = v;\n\t      });\n\t      return array;\n\t    },\n\t\n\t    toIndexedSeq: function toIndexedSeq() {\n\t      return new ToIndexedSequence(this);\n\t    },\n\t\n\t    toJS: function toJS() {\n\t      return this.toSeq().map(function (value) {\n\t        return value && typeof value.toJS === 'function' ? value.toJS() : value;\n\t      }).__toJS();\n\t    },\n\t\n\t    toJSON: function toJSON() {\n\t      return this.toSeq().map(function (value) {\n\t        return value && typeof value.toJSON === 'function' ? value.toJSON() : value;\n\t      }).__toJS();\n\t    },\n\t\n\t    toKeyedSeq: function toKeyedSeq() {\n\t      return new ToKeyedSequence(this, true);\n\t    },\n\t\n\t    toMap: function toMap() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Map(this.toKeyedSeq());\n\t    },\n\t\n\t    toObject: function toObject() {\n\t      assertNotInfinite(this.size);\n\t      var object = {};\n\t      this.__iterate(function (v, k) {\n\t        object[k] = v;\n\t      });\n\t      return object;\n\t    },\n\t\n\t    toOrderedMap: function toOrderedMap() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedMap(this.toKeyedSeq());\n\t    },\n\t\n\t    toOrderedSet: function toOrderedSet() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSet: function toSet() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Set(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSetSeq: function toSetSeq() {\n\t      return new ToSetSequence(this);\n\t    },\n\t\n\t    toSeq: function toSeq() {\n\t      return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();\n\t    },\n\t\n\t    toStack: function toStack() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Stack(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toList: function toList() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return List(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    // ### Common JavaScript methods and properties\n\t\n\t    toString: function toString() {\n\t      return '[Iterable]';\n\t    },\n\t\n\t    __toString: function __toString(head, tail) {\n\t      if (this.size === 0) {\n\t        return head + tail;\n\t      }\n\t      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n\t    },\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    concat: function concat() {\n\t      var values = SLICE$0.call(arguments, 0);\n\t      return reify(this, concatFactory(this, values));\n\t    },\n\t\n\t    includes: function includes(searchValue) {\n\t      return this.some(function (value) {\n\t        return is(value, searchValue);\n\t      });\n\t    },\n\t\n\t    entries: function entries() {\n\t      return this.__iterator(ITERATE_ENTRIES);\n\t    },\n\t\n\t    every: function every(predicate, context) {\n\t      assertNotInfinite(this.size);\n\t      var returnValue = true;\n\t      this.__iterate(function (v, k, c) {\n\t        if (!predicate.call(context, v, k, c)) {\n\t          returnValue = false;\n\t          return false;\n\t        }\n\t      });\n\t      return returnValue;\n\t    },\n\t\n\t    filter: function filter(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, true));\n\t    },\n\t\n\t    find: function find(predicate, context, notSetValue) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[1] : notSetValue;\n\t    },\n\t\n\t    forEach: function forEach(sideEffect, context) {\n\t      assertNotInfinite(this.size);\n\t      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n\t    },\n\t\n\t    join: function join(separator) {\n\t      assertNotInfinite(this.size);\n\t      separator = separator !== undefined ? '' + separator : ',';\n\t      var joined = '';\n\t      var isFirst = true;\n\t      this.__iterate(function (v) {\n\t        isFirst ? isFirst = false : joined += separator;\n\t        joined += v !== null && v !== undefined ? v.toString() : '';\n\t      });\n\t      return joined;\n\t    },\n\t\n\t    keys: function keys() {\n\t      return this.__iterator(ITERATE_KEYS);\n\t    },\n\t\n\t    map: function map(mapper, context) {\n\t      return reify(this, mapFactory(this, mapper, context));\n\t    },\n\t\n\t    reduce: function reduce(reducer, initialReduction, context) {\n\t      assertNotInfinite(this.size);\n\t      var reduction;\n\t      var useFirst;\n\t      if (arguments.length < 2) {\n\t        useFirst = true;\n\t      } else {\n\t        reduction = initialReduction;\n\t      }\n\t      this.__iterate(function (v, k, c) {\n\t        if (useFirst) {\n\t          useFirst = false;\n\t          reduction = v;\n\t        } else {\n\t          reduction = reducer.call(context, reduction, v, k, c);\n\t        }\n\t      });\n\t      return reduction;\n\t    },\n\t\n\t    reduceRight: function reduceRight(reducer, initialReduction, context) {\n\t      var reversed = this.toKeyedSeq().reverse();\n\t      return reversed.reduce.apply(reversed, arguments);\n\t    },\n\t\n\t    reverse: function reverse() {\n\t      return reify(this, reverseFactory(this, true));\n\t    },\n\t\n\t    slice: function slice(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, true));\n\t    },\n\t\n\t    some: function some(predicate, context) {\n\t      return !this.every(not(predicate), context);\n\t    },\n\t\n\t    sort: function sort(comparator) {\n\t      return reify(this, sortFactory(this, comparator));\n\t    },\n\t\n\t    values: function values() {\n\t      return this.__iterator(ITERATE_VALUES);\n\t    },\n\t\n\t    // ### More sequential methods\n\t\n\t    butLast: function butLast() {\n\t      return this.slice(0, -1);\n\t    },\n\t\n\t    isEmpty: function isEmpty() {\n\t      return this.size !== undefined ? this.size === 0 : !this.some(function () {\n\t        return true;\n\t      });\n\t    },\n\t\n\t    count: function count(predicate, context) {\n\t      return ensureSize(predicate ? this.toSeq().filter(predicate, context) : this);\n\t    },\n\t\n\t    countBy: function countBy(grouper, context) {\n\t      return countByFactory(this, grouper, context);\n\t    },\n\t\n\t    equals: function equals(other) {\n\t      return deepEqual(this, other);\n\t    },\n\t\n\t    entrySeq: function entrySeq() {\n\t      var iterable = this;\n\t      if (iterable._cache) {\n\t        // We cache as an entries array, so we can just return the cache!\n\t        return new ArraySeq(iterable._cache);\n\t      }\n\t      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n\t      entriesSequence.fromEntrySeq = function () {\n\t        return iterable.toSeq();\n\t      };\n\t      return entriesSequence;\n\t    },\n\t\n\t    filterNot: function filterNot(predicate, context) {\n\t      return this.filter(not(predicate), context);\n\t    },\n\t\n\t    findEntry: function findEntry(predicate, context, notSetValue) {\n\t      var found = notSetValue;\n\t      this.__iterate(function (v, k, c) {\n\t        if (predicate.call(context, v, k, c)) {\n\t          found = [k, v];\n\t          return false;\n\t        }\n\t      });\n\t      return found;\n\t    },\n\t\n\t    findKey: function findKey(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry && entry[0];\n\t    },\n\t\n\t    findLast: function findLast(predicate, context, notSetValue) {\n\t      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n\t    },\n\t\n\t    findLastEntry: function findLastEntry(predicate, context, notSetValue) {\n\t      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n\t    },\n\t\n\t    findLastKey: function findLastKey(predicate, context) {\n\t      return this.toKeyedSeq().reverse().findKey(predicate, context);\n\t    },\n\t\n\t    first: function first() {\n\t      return this.find(returnTrue);\n\t    },\n\t\n\t    flatMap: function flatMap(mapper, context) {\n\t      return reify(this, flatMapFactory(this, mapper, context));\n\t    },\n\t\n\t    flatten: function flatten(depth) {\n\t      return reify(this, flattenFactory(this, depth, true));\n\t    },\n\t\n\t    fromEntrySeq: function fromEntrySeq() {\n\t      return new FromEntriesSequence(this);\n\t    },\n\t\n\t    get: function get(searchKey, notSetValue) {\n\t      return this.find(function (_, key) {\n\t        return is(key, searchKey);\n\t      }, undefined, notSetValue);\n\t    },\n\t\n\t    getIn: function getIn(searchKeyPath, notSetValue) {\n\t      var nested = this;\n\t      // Note: in an ES6 environment, we would prefer:\n\t      // for (var key of searchKeyPath) {\n\t      var iter = forceIterator(searchKeyPath);\n\t      var step;\n\t      while (!(step = iter.next()).done) {\n\t        var key = step.value;\n\t        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n\t        if (nested === NOT_SET) {\n\t          return notSetValue;\n\t        }\n\t      }\n\t      return nested;\n\t    },\n\t\n\t    groupBy: function groupBy(grouper, context) {\n\t      return groupByFactory(this, grouper, context);\n\t    },\n\t\n\t    has: function has(searchKey) {\n\t      return this.get(searchKey, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    hasIn: function hasIn(searchKeyPath) {\n\t      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    isSubset: function isSubset(iter) {\n\t      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n\t      return this.every(function (value) {\n\t        return iter.includes(value);\n\t      });\n\t    },\n\t\n\t    isSuperset: function isSuperset(iter) {\n\t      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n\t      return iter.isSubset(this);\n\t    },\n\t\n\t    keyOf: function keyOf(searchValue) {\n\t      return this.findKey(function (value) {\n\t        return is(value, searchValue);\n\t      });\n\t    },\n\t\n\t    keySeq: function keySeq() {\n\t      return this.toSeq().map(keyMapper).toIndexedSeq();\n\t    },\n\t\n\t    last: function last() {\n\t      return this.toSeq().reverse().first();\n\t    },\n\t\n\t    lastKeyOf: function lastKeyOf(searchValue) {\n\t      return this.toKeyedSeq().reverse().keyOf(searchValue);\n\t    },\n\t\n\t    max: function max(comparator) {\n\t      return maxFactory(this, comparator);\n\t    },\n\t\n\t    maxBy: function maxBy(mapper, comparator) {\n\t      return maxFactory(this, comparator, mapper);\n\t    },\n\t\n\t    min: function min(comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n\t    },\n\t\n\t    minBy: function minBy(mapper, comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n\t    },\n\t\n\t    rest: function rest() {\n\t      return this.slice(1);\n\t    },\n\t\n\t    skip: function skip(amount) {\n\t      return this.slice(Math.max(0, amount));\n\t    },\n\t\n\t    skipLast: function skipLast(amount) {\n\t      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n\t    },\n\t\n\t    skipWhile: function skipWhile(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, true));\n\t    },\n\t\n\t    skipUntil: function skipUntil(predicate, context) {\n\t      return this.skipWhile(not(predicate), context);\n\t    },\n\t\n\t    sortBy: function sortBy(mapper, comparator) {\n\t      return reify(this, sortFactory(this, comparator, mapper));\n\t    },\n\t\n\t    take: function take(amount) {\n\t      return this.slice(0, Math.max(0, amount));\n\t    },\n\t\n\t    takeLast: function takeLast(amount) {\n\t      return reify(this, this.toSeq().reverse().take(amount).reverse());\n\t    },\n\t\n\t    takeWhile: function takeWhile(predicate, context) {\n\t      return reify(this, takeWhileFactory(this, predicate, context));\n\t    },\n\t\n\t    takeUntil: function takeUntil(predicate, context) {\n\t      return this.takeWhile(not(predicate), context);\n\t    },\n\t\n\t    valueSeq: function valueSeq() {\n\t      return this.toIndexedSeq();\n\t    },\n\t\n\t    // ### Hashable Object\n\t\n\t    hashCode: function hashCode() {\n\t      return this.__hash || (this.__hash = hashIterable(this));\n\t    }\n\t\n\t    // ### Internal\n\t\n\t    // abstract __iterate(fn, reverse)\n\t\n\t    // abstract __iterator(type, reverse)\n\t  });\n\t\n\t  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  var IterablePrototype = Iterable.prototype;\n\t  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n\t  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n\t  IterablePrototype.__toJS = IterablePrototype.toArray;\n\t  IterablePrototype.__toStringMapper = quoteString;\n\t  IterablePrototype.inspect = IterablePrototype.toSource = function () {\n\t    return this.toString();\n\t  };\n\t  IterablePrototype.chain = IterablePrototype.flatMap;\n\t  IterablePrototype.contains = IterablePrototype.includes;\n\t\n\t  mixin(KeyedIterable, {\n\t\n\t    // ### More sequential methods\n\t\n\t    flip: function flip() {\n\t      return reify(this, flipFactory(this));\n\t    },\n\t\n\t    mapEntries: function mapEntries(mapper, context) {\n\t      var this$0 = this;\n\t      var iterations = 0;\n\t      return reify(this, this.toSeq().map(function (v, k) {\n\t        return mapper.call(context, [k, v], iterations++, this$0);\n\t      }).fromEntrySeq());\n\t    },\n\t\n\t    mapKeys: function mapKeys(mapper, context) {\n\t      var this$0 = this;\n\t      return reify(this, this.toSeq().flip().map(function (k, v) {\n\t        return mapper.call(context, k, v, this$0);\n\t      }).flip());\n\t    }\n\t\n\t  });\n\t\n\t  var KeyedIterablePrototype = KeyedIterable.prototype;\n\t  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n\t  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n\t  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n\t  KeyedIterablePrototype.__toStringMapper = function (v, k) {\n\t    return JSON.stringify(k) + ': ' + quoteString(v);\n\t  };\n\t\n\t  mixin(IndexedIterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toKeyedSeq: function toKeyedSeq() {\n\t      return new ToKeyedSequence(this, false);\n\t    },\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    filter: function filter(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, false));\n\t    },\n\t\n\t    findIndex: function findIndex(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[0] : -1;\n\t    },\n\t\n\t    indexOf: function indexOf(searchValue) {\n\t      var key = this.keyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    lastIndexOf: function lastIndexOf(searchValue) {\n\t      var key = this.lastKeyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    reverse: function reverse() {\n\t      return reify(this, reverseFactory(this, false));\n\t    },\n\t\n\t    slice: function slice(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, false));\n\t    },\n\t\n\t    splice: function splice(index, removeNum /*, ...values*/) {\n\t      var numArgs = arguments.length;\n\t      removeNum = Math.max(removeNum | 0, 0);\n\t      if (numArgs === 0 || numArgs === 2 && !removeNum) {\n\t        return this;\n\t      }\n\t      // If index is negative, it should resolve relative to the size of the\n\t      // collection. However size may be expensive to compute if not cached, so\n\t      // only call count() if the number is in fact negative.\n\t      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n\t      var spliced = this.slice(0, index);\n\t      return reify(this, numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum)));\n\t    },\n\t\n\t    // ### More collection methods\n\t\n\t    findLastIndex: function findLastIndex(predicate, context) {\n\t      var entry = this.findLastEntry(predicate, context);\n\t      return entry ? entry[0] : -1;\n\t    },\n\t\n\t    first: function first() {\n\t      return this.get(0);\n\t    },\n\t\n\t    flatten: function flatten(depth) {\n\t      return reify(this, flattenFactory(this, depth, false));\n\t    },\n\t\n\t    get: function get(index, notSetValue) {\n\t      index = wrapIndex(this, index);\n\t      return index < 0 || this.size === Infinity || this.size !== undefined && index > this.size ? notSetValue : this.find(function (_, key) {\n\t        return key === index;\n\t      }, undefined, notSetValue);\n\t    },\n\t\n\t    has: function has(index) {\n\t      index = wrapIndex(this, index);\n\t      return index >= 0 && (this.size !== undefined ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);\n\t    },\n\t\n\t    interpose: function interpose(separator) {\n\t      return reify(this, interposeFactory(this, separator));\n\t    },\n\t\n\t    interleave: function interleave() /*...iterables*/{\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n\t      var interleaved = zipped.flatten(true);\n\t      if (zipped.size) {\n\t        interleaved.size = zipped.size * iterables.length;\n\t      }\n\t      return reify(this, interleaved);\n\t    },\n\t\n\t    keySeq: function keySeq() {\n\t      return Range(0, this.size);\n\t    },\n\t\n\t    last: function last() {\n\t      return this.get(-1);\n\t    },\n\t\n\t    skipWhile: function skipWhile(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, false));\n\t    },\n\t\n\t    zip: function zip() /*, ...iterables */{\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n\t    },\n\t\n\t    zipWith: function zipWith(zipper /*, ...iterables */) {\n\t      var iterables = arrCopy(arguments);\n\t      iterables[0] = this;\n\t      return reify(this, zipWithFactory(this, zipper, iterables));\n\t    }\n\t\n\t  });\n\t\n\t  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n\t  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t  mixin(SetIterable, {\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    get: function get(value, notSetValue) {\n\t      return this.has(value) ? value : notSetValue;\n\t    },\n\t\n\t    includes: function includes(value) {\n\t      return this.has(value);\n\t    },\n\t\n\t    // ### More sequential methods\n\t\n\t    keySeq: function keySeq() {\n\t      return this.valueSeq();\n\t    }\n\t\n\t  });\n\t\n\t  SetIterable.prototype.has = IterablePrototype.includes;\n\t  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\t\n\t  // Mixin subclasses\n\t\n\t  mixin(KeyedSeq, KeyedIterable.prototype);\n\t  mixin(IndexedSeq, IndexedIterable.prototype);\n\t  mixin(SetSeq, SetIterable.prototype);\n\t\n\t  mixin(KeyedCollection, KeyedIterable.prototype);\n\t  mixin(IndexedCollection, IndexedIterable.prototype);\n\t  mixin(SetCollection, SetIterable.prototype);\n\t\n\t  // #pragma Helper functions\n\t\n\t  function keyMapper(v, k) {\n\t    return k;\n\t  }\n\t\n\t  function entryMapper(v, k) {\n\t    return [k, v];\n\t  }\n\t\n\t  function not(predicate) {\n\t    return function () {\n\t      return !predicate.apply(this, arguments);\n\t    };\n\t  }\n\t\n\t  function neg(predicate) {\n\t    return function () {\n\t      return -predicate.apply(this, arguments);\n\t    };\n\t  }\n\t\n\t  function quoteString(value) {\n\t    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n\t  }\n\t\n\t  function defaultZipper() {\n\t    return arrCopy(arguments);\n\t  }\n\t\n\t  function defaultNegComparator(a, b) {\n\t    return a < b ? 1 : a > b ? -1 : 0;\n\t  }\n\t\n\t  function hashIterable(iterable) {\n\t    if (iterable.size === Infinity) {\n\t      return 0;\n\t    }\n\t    var ordered = isOrdered(iterable);\n\t    var keyed = isKeyed(iterable);\n\t    var h = ordered ? 1 : 0;\n\t    var size = iterable.__iterate(keyed ? ordered ? function (v, k) {\n\t      h = 31 * h + hashMerge(hash(v), hash(k)) | 0;\n\t    } : function (v, k) {\n\t      h = h + hashMerge(hash(v), hash(k)) | 0;\n\t    } : ordered ? function (v) {\n\t      h = 31 * h + hash(v) | 0;\n\t    } : function (v) {\n\t      h = h + hash(v) | 0;\n\t    });\n\t    return murmurHashOfSize(size, h);\n\t  }\n\t\n\t  function murmurHashOfSize(size, h) {\n\t    h = imul(h, 0xCC9E2D51);\n\t    h = imul(h << 15 | h >>> -15, 0x1B873593);\n\t    h = imul(h << 13 | h >>> -13, 5);\n\t    h = (h + 0xE6546B64 | 0) ^ size;\n\t    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n\t    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n\t    h = smi(h ^ h >>> 16);\n\t    return h;\n\t  }\n\t\n\t  function hashMerge(a, b) {\n\t    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n\t  }\n\t\n\t  var Immutable = {\n\t\n\t    Iterable: Iterable,\n\t\n\t    Seq: Seq,\n\t    Collection: Collection,\n\t    Map: Map,\n\t    OrderedMap: OrderedMap,\n\t    List: List,\n\t    Stack: Stack,\n\t    Set: Set,\n\t    OrderedSet: OrderedSet,\n\t\n\t    Record: Record,\n\t    Range: Range,\n\t    Repeat: Repeat,\n\t\n\t    is: is,\n\t    fromJS: fromJS\n\t\n\t  };\n\t\n\t  return Immutable;\n\t});\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"draft-js\");\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _immutable = __webpack_require__(1);\n\t\n\tvar SPACE = ' ';\n\tvar MAX_DEPTH = 4;\n\t\n\tvar getWhitespaceChunk = function getWhitespaceChunk(entityId) {\n\t  return {\n\t    text: SPACE,\n\t    inlines: [new _immutable.OrderedSet()],\n\t    entities: [entityId],\n\t    blocks: []\n\t  };\n\t};\n\t\n\tvar createTextChunk = function createTextChunk(node, inlineStyle, entityId) {\n\t  var text = node.textContent;\n\t  if (text.trim() === '') {\n\t    return { chunk: getWhitespaceChunk(entityId) };\n\t  }\n\t  return {\n\t    chunk: {\n\t      text: text,\n\t      inlines: Array(text.length).fill(inlineStyle),\n\t      entities: Array(text.length).fill(entityId),\n\t      blocks: []\n\t    }\n\t  };\n\t};\n\t\n\tvar getSoftNewlineChunk = function getSoftNewlineChunk() {\n\t  return {\n\t    text: '\\n',\n\t    inlines: [new _immutable.OrderedSet()],\n\t    entities: new Array(1),\n\t    blocks: []\n\t  };\n\t};\n\t\n\tvar getEmptyChunk = function getEmptyChunk() {\n\t  return {\n\t    text: '',\n\t    inlines: [],\n\t    entities: [],\n\t    blocks: []\n\t  };\n\t};\n\t\n\tvar getFirstBlockChunk = function getFirstBlockChunk(blockType, data) {\n\t  return {\n\t    text: '',\n\t    inlines: [],\n\t    entities: [],\n\t    blocks: [{\n\t      type: blockType,\n\t      depth: 0,\n\t      data: data || new _immutable.Map({})\n\t    }]\n\t  };\n\t};\n\t\n\tvar getBlockDividerChunk = function getBlockDividerChunk(blockType, depth, data) {\n\t  return {\n\t    text: '\\r',\n\t    inlines: [],\n\t    entities: [],\n\t    blocks: [{\n\t      type: blockType,\n\t      depth: Math.max(0, Math.min(MAX_DEPTH, depth)),\n\t      data: data || new _immutable.Map({})\n\t    }]\n\t  };\n\t};\n\t\n\tvar getAtomicBlockChunk = function getAtomicBlockChunk(entityId) {\n\t  return {\n\t    text: '\\r ',\n\t    inlines: [new _immutable.OrderedSet()],\n\t    entities: [entityId],\n\t    blocks: [{\n\t      type: 'atomic',\n\t      depth: 0,\n\t      data: {}\n\t    }]\n\t  };\n\t};\n\t\n\tvar joinChunks = function joinChunks(A, B) {\n\t  return {\n\t    text: A.text + B.text,\n\t    inlines: A.inlines.concat(B.inlines),\n\t    entities: A.entities.concat(B.entities),\n\t    blocks: A.blocks.concat(B.blocks)\n\t  };\n\t};\n\t\n\tmodule.exports = {\n\t  createTextChunk: createTextChunk,\n\t  getWhitespaceChunk: getWhitespaceChunk,\n\t  getSoftNewlineChunk: getSoftNewlineChunk,\n\t  getEmptyChunk: getEmptyChunk,\n\t  getBlockDividerChunk: getBlockDividerChunk,\n\t  getFirstBlockChunk: getFirstBlockChunk,\n\t  getAtomicBlockChunk: getAtomicBlockChunk,\n\t  joinChunks: joinChunks\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = getBlockData;\n\t\n\tvar _immutable = __webpack_require__(1);\n\t\n\tfunction getBlockData(node) {\n\t  if (node.style.textAlign) {\n\t    return new _immutable.Map({\n\t      'text-align': node.style.textAlign\n\t    });\n\t  }\n\t  return undefined;\n\t}\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = getBlockTypeForTag;\n\t\n\tvar _immutable = __webpack_require__(1);\n\t\n\tvar blockRenderMap = new _immutable.Map({\n\t  'header-one': {\n\t    element: 'h1'\n\t  },\n\t  'header-two': {\n\t    element: 'h2'\n\t  },\n\t  'header-three': {\n\t    element: 'h3'\n\t  },\n\t  'header-four': {\n\t    element: 'h4'\n\t  },\n\t  'header-five': {\n\t    element: 'h5'\n\t  },\n\t  'header-six': {\n\t    element: 'h6'\n\t  },\n\t  'unordered-list-item': {\n\t    element: 'li',\n\t    wrapper: 'ul'\n\t  },\n\t  'ordered-list-item': {\n\t    element: 'li',\n\t    wrapper: 'ol'\n\t  },\n\t  blockquote: {\n\t    element: 'blockquote'\n\t  },\n\t  atomic: {\n\t    element: 'figure'\n\t  },\n\t  unstyled: {\n\t    element: 'p'\n\t  }\n\t});\n\t\n\tfunction getBlockTypeForTag(tag, lastList) {\n\t  var matchedTypes = blockRenderMap.filter(function (draftBlock) {\n\t    return draftBlock.element === tag && (!draftBlock.wrapper || draftBlock.wrapper === lastList) || draftBlock.wrapper === tag;\n\t  }).keySeq().toSet().toArray();\n\t\n\t  if (matchedTypes.length === 1) {\n\t    return matchedTypes[0];\n\t  }\n\t  return undefined;\n\t}\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _draftJs = __webpack_require__(2);\n\t\n\tvar getEntityId = function getEntityId(node) {\n\t  var entityId = undefined;\n\t  if (node instanceof HTMLAnchorElement) {\n\t    var entityConfig = {};\n\t    if (node.dataset.mention !== undefined) {\n\t      entityConfig.url = node.href;\n\t      entityConfig.text = node.innerHTML;\n\t      entityConfig.value = node.dataset.value;\n\t      entityId = _draftJs.Entity.create('MENTION', 'IMMUTABLE', entityConfig);\n\t    } else {\n\t      entityConfig.url = node.href;\n\t      entityConfig.title = node.innerHTML;\n\t      entityId = _draftJs.Entity.create('LINK', 'MUTABLE', entityConfig);\n\t    }\n\t  }\n\t  return entityId;\n\t};\n\t\n\tmodule.exports = getEntityId;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar getSafeBodyFromHTML = function getSafeBodyFromHTML(html) {\n\t  var doc;\n\t  var root = null;\n\t  if (document.implementation && document.implementation.createHTMLDocument) {\n\t    doc = document.implementation.createHTMLDocument('foo');\n\t    doc.documentElement.innerHTML = html;\n\t    root = doc.getElementsByTagName('body')[0];\n\t  }\n\t  return root;\n\t};\n\t\n\tmodule.exports = getSafeBodyFromHTML;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\texports.default = htmlToDraft;\n\t\n\tvar _draftJs = __webpack_require__(2);\n\t\n\tvar _immutable = __webpack_require__(1);\n\t\n\tvar _getSafeBodyFromHTML = __webpack_require__(7);\n\t\n\tvar _getSafeBodyFromHTML2 = _interopRequireDefault(_getSafeBodyFromHTML);\n\t\n\tvar _chunkBuilder = __webpack_require__(3);\n\t\n\tvar _getBlockTypeForTag = __webpack_require__(5);\n\t\n\tvar _getBlockTypeForTag2 = _interopRequireDefault(_getBlockTypeForTag);\n\t\n\tvar _processInlineTag = __webpack_require__(9);\n\t\n\tvar _processInlineTag2 = _interopRequireDefault(_processInlineTag);\n\t\n\tvar _getBlockData = __webpack_require__(4);\n\t\n\tvar _getBlockData2 = _interopRequireDefault(_getBlockData);\n\t\n\tvar _getEntityId = __webpack_require__(6);\n\t\n\tvar _getEntityId2 = _interopRequireDefault(_getEntityId);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar SPACE = ' ';\n\tvar REGEX_NBSP = new RegExp('&nbsp;', 'g');\n\t\n\tvar firstBlock = true;\n\t\n\tfunction genFragment(node, inlineStyle, depth, lastList, inEntity) {\n\t  var nodeName = node.nodeName.toLowerCase();\n\t\n\t  if (nodeName === '#text' && node.textContent !== '\\n') {\n\t    return (0, _chunkBuilder.createTextChunk)(node, inlineStyle, inEntity);\n\t  }\n\t\n\t  if (nodeName === 'br') {\n\t    return { chunk: (0, _chunkBuilder.getSoftNewlineChunk)() };\n\t  }\n\t\n\t  if (nodeName === 'img' && node instanceof HTMLImageElement) {\n\t    var entityConfig = {};\n\t    entityConfig.src = node.src;\n\t    entityConfig.height = node.style.height;\n\t    entityConfig.width = node.style.width;\n\t    var entityId = _draftJs.Entity.create('IMAGE', 'MUTABLE', entityConfig);\n\t    return { chunk: (0, _chunkBuilder.getAtomicBlockChunk)(entityId) };\n\t  }\n\t\n\t  if (nodeName === 'iframe' && node instanceof HTMLIFrameElement) {\n\t    var _entityConfig = {};\n\t    _entityConfig.src = node.src;\n\t    _entityConfig.height = node.height;\n\t    _entityConfig.width = node.width;\n\t    var _entityId = _draftJs.Entity.create('EMBEDDED_LINK', 'MUTABLE', _entityConfig);\n\t    return { chunk: (0, _chunkBuilder.getAtomicBlockChunk)(_entityId) };\n\t  }\n\t\n\t  var blockType = (0, _getBlockTypeForTag2.default)(nodeName, lastList);\n\t\n\t  var chunk = void 0;\n\t  if (blockType) {\n\t    if (nodeName === 'ul' || nodeName === 'ol') {\n\t      lastList = nodeName;\n\t      depth += 1;\n\t    } else {\n\t      if (blockType !== 'unordered-list-item' && blockType !== 'ordered-list-item') {\n\t        lastList = '';\n\t        depth = -1;\n\t      }\n\t      if (!firstBlock) {\n\t        chunk = (0, _chunkBuilder.getBlockDividerChunk)(blockType, depth, (0, _getBlockData2.default)(node));\n\t      } else {\n\t        chunk = (0, _chunkBuilder.getFirstBlockChunk)(blockType, (0, _getBlockData2.default)(node));\n\t        firstBlock = false;\n\t      }\n\t    }\n\t  }\n\t  if (!chunk) {\n\t    chunk = (0, _chunkBuilder.getEmptyChunk)();\n\t  }\n\t\n\t  inlineStyle = (0, _processInlineTag2.default)(nodeName, node, inlineStyle);\n\t\n\t  var child = node.firstChild;\n\t  while (child) {\n\t    var _entityId2 = (0, _getEntityId2.default)(child);\n\t\n\t    var _genFragment = genFragment(child, inlineStyle, depth, lastList, _entityId2 || inEntity),\n\t        generatedChunk = _genFragment.chunk;\n\t\n\t    chunk = (0, _chunkBuilder.joinChunks)(chunk, generatedChunk);\n\t    var sibling = child.nextSibling;\n\t    child = sibling;\n\t  }\n\t\n\t  return { chunk: chunk };\n\t}\n\t\n\tfunction getChunkForHTML(html) {\n\t  var sanitizedHtml = html.trim().replace(REGEX_NBSP, SPACE);\n\t  var safeBody = (0, _getSafeBodyFromHTML2.default)(sanitizedHtml);\n\t  if (!safeBody) {\n\t    return null;\n\t  }\n\t  firstBlock = true;\n\t\n\t  var _genFragment2 = genFragment(safeBody, new _immutable.OrderedSet(), -1, '', undefined),\n\t      chunk = _genFragment2.chunk;\n\t\n\t  return { chunk: chunk };\n\t}\n\t\n\tfunction htmlToDraft(html) {\n\t  var chunkData = getChunkForHTML(html);\n\t  if (chunkData) {\n\t    var _ret = function () {\n\t      var chunk = chunkData.chunk;\n\t\n\t      var entityMap = new _immutable.OrderedMap({});\n\t      // chunk.entities && chunk.entities.forEach(entity => {\n\t      //   entityMap = entityMap.set(entity, Entity.get(entity));\n\t      // });\n\t      var start = 0;\n\t      return {\n\t        v: {\n\t          contentBlocks: chunk.text.split('\\r').map(function (textBlock, ii) {\n\t            var end = start + textBlock.length;\n\t            var inlines = chunk && chunk.inlines.slice(start, end);\n\t            var entities = chunk && chunk.entities.slice(start, end);\n\t            var characterList = new _immutable.List(inlines.map(function (style, index) {\n\t              var data = { style: style, entity: null };\n\t              if (entities[index]) {\n\t                data.entity = entities[index];\n\t              }\n\t              return _draftJs.CharacterMetadata.create(data);\n\t            }));\n\t            start = end;\n\t            return new _draftJs.ContentBlock({\n\t              key: (0, _draftJs.genKey)(),\n\t              type: chunk && chunk.blocks[ii].type,\n\t              depth: chunk && chunk.blocks[ii].depth,\n\t              data: chunk && chunk.blocks[ii].data,\n\t              text: textBlock,\n\t              characterList: characterList\n\t            });\n\t          }),\n\t          entityMap: entityMap\n\t        }\n\t      };\n\t      return {\n\t        v: null\n\t      };\n\t    }();\n\t\n\t    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n\t  }\n\t  return null;\n\t}\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = processInlineTag;\n\tvar inlineTags = {\n\t  code: 'CODE',\n\t  del: 'STRIKETHROUGH',\n\t  em: 'ITALIC',\n\t  strong: 'BOLD',\n\t  ins: 'UNDERLINE',\n\t  sub: 'SUBSCRIPT',\n\t  sup: 'SUPERSCRIPT'\n\t};\n\t\n\tfunction processInlineTag(tag, node, currentStyle) {\n\t  var styleToCheck = inlineTags[tag];\n\t  var inlineStyle = void 0;\n\t  if (styleToCheck) {\n\t    inlineStyle = currentStyle.add(styleToCheck).toOrderedSet();\n\t  } else if (node instanceof HTMLElement) {\n\t    (function () {\n\t      inlineStyle = currentStyle;\n\t      var htmlElement = node;\n\t      inlineStyle = inlineStyle.withMutations(function (style) {\n\t        var color = htmlElement.style.color;\n\t        var backgroundColor = htmlElement.style.backgroundColor;\n\t        var fontSize = htmlElement.style.fontSize;\n\t        var fontFamily = htmlElement.style.fontFamily;\n\t        if (color) {\n\t          style.add('color-' + color.replace(/ /g, ''));\n\t        }\n\t        if (backgroundColor) {\n\t          style.add('bgcolor-' + backgroundColor.replace(/ /g, ''));\n\t        }\n\t        if (fontSize) {\n\t          style.add('fontsize-' + fontSize.substr(0, fontSize.length - 2));\n\t        }\n\t        if (fontFamily) {\n\t          style.add('fontfamily-' + fontFamily);\n\t        }\n\t      }).toOrderedSet();\n\t    })();\n\t  }\n\t  return inlineStyle;\n\t}\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// html-to-draftjs.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6cd70b34eac65c81e7a0","/**\n *  Copyright (c) 2014-2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Immutable = factory());\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  function Iterable(value) {\n      return isIterable(value) ? value : Seq(value);\n    }\n\n\n  createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n\n  createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n\n  createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n      defaultIndex :\n      index < 0 ?\n        Math.max(0, size + index) :\n        size === undefined ?\n          index :\n          Math.min(size, index);\n  }\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function Iterator(next) {\n      this.next = next;\n    }\n\n    Iterator.prototype.toString = function() {\n      return '[Iterator]';\n    };\n\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect =\n  Iterator.prototype.toSource = function () { return this.toString(); }\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]\n    );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n    function Seq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n\n    Seq.of = function(/*...values*/) {\n      return Seq(arguments);\n    };\n\n    Seq.prototype.toSeq = function() {\n      return this;\n    };\n\n    Seq.prototype.toString = function() {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function() {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, true);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, true);\n    };\n\n\n\n  createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n      return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n          keyedSeqFromValue(value);\n    }\n\n    KeyedSeq.prototype.toKeyedSeq = function() {\n      return this;\n    };\n\n\n\n  createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n\n    IndexedSeq.of = function(/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function() {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function() {\n      return this.__toString('Seq [', ']');\n    };\n\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, false);\n    };\n\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, false);\n    };\n\n\n\n  createClass(SetSeq, Seq);\n    function SetSeq(value) {\n      return (\n        value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value\n      ).toSetSeq();\n    }\n\n    SetSeq.of = function(/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function() {\n      return this;\n    };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    ArraySeq.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n      );\n    };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function(key) {\n      return this._object.hasOwnProperty(key);\n    };\n\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        if (fn(object[key], key, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n      });\n    };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n      this._iterable = iterable;\n      this.size = iterable.length || iterable.size;\n    }\n\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n      this._iterator = iterator;\n      this._iteratorCache = [];\n    }\n\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      while (iterations < cache.length) {\n        if (fn(cache[iterations], iterations++, this) === false) {\n          return iterations;\n        }\n      }\n      var step;\n      while (!(step = iterator.next()).done) {\n        var val = step.value;\n        cache[iterations] = val;\n        if (fn(val, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      return new Iterator(function()  {\n        if (iterations >= cache.length) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          cache[iterations] = step.value;\n        }\n        return iteratorValue(type, iterations, cache[iterations++]);\n      });\n    };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n      typeof value === 'object' ? new ObjectSeq(value) :\n      undefined;\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of [k, v] entries, '+\n        'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n      (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n      isArrayLike(value) ? new ArraySeq(value) :\n      isIterator(value) ? new IteratorSeq(value) :\n      hasIterator(value) ? new IterableSeq(value) :\n      undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n      fromJSWith(converter, json, '', {'': json}) :\n      fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    if (typeof valueA.equals === 'function' &&\n        typeof valueB.equals === 'function' &&\n        valueA.equals(valueB)) {\n      return true;\n    }\n    return false;\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isIterable(b) ||\n      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Repeat, IndexedSeq);\n\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    Repeat.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function(searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function(begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n\n    Repeat.prototype.reverse = function() {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function(fn, reverse) {\n      for (var ii = 0; ii < this.size; ii++) {\n        if (fn(this._value, ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n      );\n    };\n\n    Repeat.prototype.equals = function(other) {\n      return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n    };\n\n\n  var EMPTY_REPEAT;\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  createClass(Range, IndexedSeq);\n\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    Range.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]';\n    };\n\n    Range.prototype.get = function(index, notSetValue) {\n      return this.has(index) ?\n        this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n    };\n\n    Range.prototype.includes = function(searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n    };\n\n    Range.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n\n    Range.prototype.indexOf = function(searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function(searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function(fn, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(value, ii, this) === false) {\n          return ii + 1;\n        }\n        value += reverse ? -step : step;\n      }\n      return ii;\n    };\n\n    Range.prototype.__iterator = function(type, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      var ii = 0;\n      return new Iterator(function()  {\n        var v = value;\n        value += reverse ? -step : step;\n        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n      });\n    };\n\n    Range.prototype.equals = function(other) {\n      return other instanceof Range ?\n        this._start === other._start &&\n        this._end === other._end &&\n        this._step === other._step :\n        deepEqual(this, other);\n    };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Collection, Iterable);\n    function Collection() {\n      throw TypeError('Abstract');\n    }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n    Math.imul :\n    function imul(a, b) {\n      a = a | 0; // int\n      b = b | 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n    };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      if (o !== o || o === Infinity) {\n        return 0;\n      }\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    if (type === 'object') {\n      return hashJSObj(o);\n    }\n    if (typeof o.toString === 'function') {\n      return hashString(o.toString());\n    }\n    throw new Error('Value type ' + type + ' cannot be hashed.');\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash;\n    if (usingWeakMap) {\n      hash = weakMap.get(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = obj[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash !== undefined) {\n        return hash;\n      }\n\n      hash = getIENodeHash(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hash);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable !== undefined &&\n               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(Map, KeyedCollection);\n\n    // @pragma Construction\n\n    function Map(value) {\n      return value === null || value === undefined ? emptyMap() :\n        isMap(value) && !isOrdered(value) ? value :\n        emptyMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n      return emptyMap().withMutations(function(map ) {\n        for (var i = 0; i < keyValues.length; i += 2) {\n          if (i + 1 >= keyValues.length) {\n            throw new Error('Missing value for key: ' + keyValues[i]);\n          }\n          map.set(keyValues[i], keyValues[i + 1]);\n        }\n      });\n    };\n\n    Map.prototype.toString = function() {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function(k, notSetValue) {\n      return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function(k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.setIn = function(keyPath, v) {\n      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n    };\n\n    Map.prototype.remove = function(k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteIn = function(keyPath) {\n      return this.updateIn(keyPath, function()  {return NOT_SET});\n    };\n\n    Map.prototype.update = function(k, notSetValue, updater) {\n      return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n    };\n\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n      if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n      }\n      var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n      );\n      return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n\n    Map.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.merge = function(/*...iters*/) {\n      return mergeIntoMapWith(this, undefined, arguments);\n    };\n\n    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, merger, iters);\n    };\n\n    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.merge === 'function' ?\n          m.merge.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n\n    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n\n    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.mergeDeep === 'function' ?\n          m.mergeDeep.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.withMutations = function(fn) {\n      var mutable = this.asMutable();\n      fn(mutable);\n      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n\n    Map.prototype.asMutable = function() {\n      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n\n    Map.prototype.asImmutable = function() {\n      return this.__ensureOwner();\n    };\n\n    Map.prototype.wasAltered = function() {\n      return this.__altered;\n    };\n\n    Map.prototype.__iterator = function(type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      this._root && this._root.iterate(function(entry ) {\n        iterations++;\n        return fn(entry[1], entry[0], this$0);\n      }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n    function ArrayMapNode(ownerID, entries) {\n      this.ownerID = ownerID;\n      this.entries = entries;\n    }\n\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && entries.length === 1) {\n        return; // undefined\n      }\n\n      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new ArrayMapNode(ownerID, newEntries);\n    };\n\n\n\n\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n      this.ownerID = ownerID;\n      this.bitmap = bitmap;\n      this.nodes = nodes;\n    }\n\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n      var bitmap = this.bitmap;\n      return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var bit = 1 << keyHashFrag;\n      var bitmap = this.bitmap;\n      var exists = (bitmap & bit) !== 0;\n\n      if (!exists && value === NOT_SET) {\n        return this;\n      }\n\n      var idx = popCount(bitmap & (bit - 1));\n      var nodes = this.nodes;\n      var node = exists ? nodes[idx] : undefined;\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n      if (newNode === node) {\n        return this;\n      }\n\n      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n      }\n\n      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n      }\n\n      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n      var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n\n\n\n\n    function HashArrayMapNode(ownerID, count, nodes) {\n      this.ownerID = ownerID;\n      this.count = count;\n      this.nodes = nodes;\n    }\n\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var node = this.nodes[idx];\n      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var removed = value === NOT_SET;\n      var nodes = this.nodes;\n      var node = nodes[idx];\n\n      if (removed && !node) {\n        return this;\n      }\n\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n      if (newNode === node) {\n        return this;\n      }\n\n      var newCount = this.count;\n      if (!node) {\n        newCount++;\n      } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n          return packNodes(ownerID, nodes, newCount, idx);\n        }\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n\n\n\n\n    function HashCollisionNode(ownerID, keyHash, entries) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entries = entries;\n    }\n\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n\n      var removed = value === NOT_SET;\n\n      if (keyHash !== this.keyHash) {\n        if (removed) {\n          return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n      }\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n\n\n\n\n    function ValueNode(ownerID, keyHash, entry) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entry = entry;\n    }\n\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n      var keyMatch = is(key, this.entry[0]);\n      if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n\n      if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n      }\n\n      if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n          this.entry[1] = value;\n          return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [key, value]);\n      }\n\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n    };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  }\n\n  BitmapIndexedNode.prototype.iterate =\n  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, Iterator);\n\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    MapIterator.prototype.next = function() {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex;\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(existing, value, key) {\n    return existing && existing.mergeDeep && isIterable(value) ?\n      existing.mergeDeep(value) :\n      is(existing, value) ? existing : value;\n  }\n\n  function deepMergerWith(merger) {\n    return function(existing, value, key)  {\n      if (existing && existing.mergeDeepWith && isIterable(value)) {\n        return existing.mergeDeepWith(merger, value);\n      }\n      var nextValue = merger(existing, value, key);\n      return is(existing, nextValue) ? existing : nextValue;\n    };\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n        function(value, key)  {\n          collection.update(key, NOT_SET, function(existing )\n            {return existing === NOT_SET ? value : merger(existing, value, key)}\n          );\n        } :\n        function(value, key)  {\n          collection.set(key, value);\n        }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n      isNotSet || (existing && existing.set),\n      'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n      nextExisting,\n      keyPathIter,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting ? existing :\n      nextUpdated === NOT_SET ? existing.remove(key) :\n      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n    // @pragma Construction\n\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedIterable(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function(list ) {\n        list.setSize(size);\n        iter.forEach(function(v, i)  {return list.set(i, v)});\n      });\n    }\n\n    List.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function() {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function(index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function(index) {\n      return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n        index === this.size - 1 ? this.pop() :\n        this.splice(index, 1);\n    };\n\n    List.prototype.insert = function(index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function(/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function(list ) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function() {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function(/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function(list ) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function() {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.merge = function(/*...iters*/) {\n      return mergeIntoListWith(this, undefined, arguments);\n    };\n\n    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, merger, iters);\n    };\n\n    List.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoListWith(this, deepMerger, arguments);\n    };\n\n    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n\n    List.prototype.setSize = function(size) {\n      return setListBounds(this, 0, size);\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function(begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function(type, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function()  {\n        var value = values();\n        return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function(fn, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        return this;\n      }\n      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n  ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n    function VNode(array, ownerID) {\n      this.array = array;\n      this.ownerID = ownerID;\n    }\n\n    // TODO: seems like these methods are very similar\n\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n        return this;\n      }\n      var originIndex = (index >>> level) & MASK;\n      if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n      }\n      var removingFirst = originIndex === 0;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n          return this;\n        }\n      }\n      if (removingFirst && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingFirst) {\n        for (var ii = 0; ii < originIndex; ii++) {\n          editable.array[ii] = undefined;\n        }\n      }\n      if (newChild) {\n        editable.array[originIndex] = newChild;\n      }\n      return editable;\n    };\n\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n        return this;\n      }\n      var sizeIndex = ((index - 1) >>> level) & MASK;\n      if (sizeIndex >= this.array.length) {\n        return this;\n      }\n\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n          return this;\n        }\n      }\n\n      var editable = editableVNode(this, ownerID);\n      editable.array.splice(sizeIndex + 1);\n      if (newChild) {\n        editable.array[sizeIndex] = newChild;\n      }\n      return editable;\n    };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n        iterateLeaf(node, offset) :\n        iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n          setListBounds(list, index).set(0, value) :\n          setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n      listNodeFor(list, newCapacity - 1) :\n      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, Map);\n\n    // @pragma Construction\n\n    function OrderedMap(value) {\n      return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n        emptyOrderedMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    OrderedMap.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function() {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function(k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function(k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function(k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.wasAltered = function() {\n      return this._map.wasAltered() || this._list.wasAltered();\n    };\n\n    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function(key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function() {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var ii;\n      return this._iter.__iterate(\n        this._useKeys ?\n          function(v, k)  {return fn(v, k, this$0)} :\n          ((ii = reverse ? resolveSize(this) : 0),\n            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n      );\n    };\n\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n      if (this._useKeys) {\n        return this._iter.__iterator(type, reverse);\n      }\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var ii = reverse ? resolveSize(this) : 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n      });\n    };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToIndexedSequence.prototype.includes = function(value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n    };\n\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n      });\n    };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToSetSequence.prototype.has = function(key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    FromEntriesSequence.prototype.entrySeq = function() {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(entry ) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedIterable = isIterable(entry);\n          return fn(\n            indexedIterable ? entry.get(1) : entry[1],\n            indexedIterable ? entry.get(0) : entry[0],\n            this$0\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedIterable = isIterable(entry);\n            return iteratorValue(\n              type,\n              indexedIterable ? entry.get(0) : entry[0],\n              indexedIterable ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.includes(key)};\n    flipSequence.includes = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n        notSetValue :\n        mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n        reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, iterable),\n          step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue) \n      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n      {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n          v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        0,\n        function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      if (end === Infinity) {\n        end = originalSize;\n      } else {\n        end = end | 0;\n      }\n    }\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    // If iterable.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n          iterable.get(index + resolvedBegin, notSetValue) :\n          notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n                 iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c) \n        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n          keyedSeqFromValue(v) :\n          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n      function(sum, seq)  {\n        if (sum !== undefined) {\n          var size = seq.size;\n          if (size !== undefined) {\n            return sum + size;\n          }\n        }\n      },\n      0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k) \n        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n        fn(v, iterations++, this$0) !== false},\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n          iteratorValue(type, iterations++, separator) :\n          iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n      isKeyedIterable ?\n      function(v, i)  { entries[i].length = 2; } :\n      function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n      isIndexed(iterable) ? IndexedSeq(entries) :\n      SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n      isIndexed(iterable) ? IndexedIterable :\n      SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n      (\n        isKeyed(iterable) ? KeyedSeq :\n        isIndexed(iterable) ? IndexedSeq :\n        SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(Record, KeyedCollection);\n\n    function Record(defaultValues, name) {\n      var hasInitialized;\n\n      var RecordType = function Record(values) {\n        if (values instanceof RecordType) {\n          return values;\n        }\n        if (!(this instanceof RecordType)) {\n          return new RecordType(values);\n        }\n        if (!hasInitialized) {\n          hasInitialized = true;\n          var keys = Object.keys(defaultValues);\n          setProps(RecordTypePrototype, keys);\n          RecordTypePrototype.size = keys.length;\n          RecordTypePrototype._name = name;\n          RecordTypePrototype._keys = keys;\n          RecordTypePrototype._defaultValues = defaultValues;\n        }\n        this._map = Map(values);\n      };\n\n      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n      RecordTypePrototype.constructor = RecordType;\n\n      return RecordType;\n    }\n\n    Record.prototype.toString = function() {\n      return this.__toString(recordName(this) + ' {', '}');\n    };\n\n    // @pragma Access\n\n    Record.prototype.has = function(k) {\n      return this._defaultValues.hasOwnProperty(k);\n    };\n\n    Record.prototype.get = function(k, notSetValue) {\n      if (!this.has(k)) {\n        return notSetValue;\n      }\n      var defaultVal = this._defaultValues[k];\n      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n\n    // @pragma Modification\n\n    Record.prototype.clear = function() {\n      if (this.__ownerID) {\n        this._map && this._map.clear();\n        return this;\n      }\n      var RecordType = this.constructor;\n      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n\n    Record.prototype.set = function(k, v) {\n      if (!this.has(k)) {\n        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n      }\n      if (this._map && !this._map.has(k)) {\n        var defaultVal = this._defaultValues[k];\n        if (v === defaultVal) {\n          return this;\n        }\n      }\n      var newMap = this._map && this._map.set(k, v);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.remove = function(k) {\n      if (!this.has(k)) {\n        return this;\n      }\n      var newMap = this._map && this._map.remove(k);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n    };\n\n    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n    };\n\n    Record.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map && this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return makeRecord(this, newMap, ownerID);\n    };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n  RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name || 'Record';\n  }\n\n  function setProps(prototype, names) {\n    try {\n      names.forEach(setProp.bind(undefined, prototype));\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  function setProp(prototype, name) {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  }\n\n  createClass(Set, SetCollection);\n\n    // @pragma Construction\n\n    function Set(value) {\n      return value === null || value === undefined ? emptySet() :\n        isSet(value) && !isOrdered(value) ? value :\n        emptySet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    Set.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    Set.prototype.toString = function() {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function(value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function(value) {\n      return updateSet(this, this._map.set(value, true));\n    };\n\n    Set.prototype.remove = function(value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function() {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n      iters = iters.filter(function(x ) {return x.size !== 0});\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function(set ) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n        }\n      });\n    };\n\n    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (iters.some(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.merge = function() {\n      return this.union.apply(this, arguments);\n    };\n\n    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return this.union.apply(this, iters);\n    };\n\n    Set.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n    };\n\n    Set.prototype.__iterator = function(type, reverse) {\n      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n      newMap.size === 0 ? set.__empty() :\n      set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, Set);\n\n    // @pragma Construction\n\n    function OrderedSet(value) {\n      return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n        emptyOrderedSet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    OrderedSet.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function() {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Stack, IndexedCollection);\n\n    // @pragma Construction\n\n    function Stack(value) {\n      return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n        emptyStack().unshiftAll(value);\n    }\n\n    Stack.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function() {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function(index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function() {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function(/*...values*/) {\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments[ii],\n          next: head\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function(iter) {\n      iter = IndexedIterable(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.reverse().forEach(function(value ) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      });\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function() {\n      return this.slice(1);\n    };\n\n    Stack.prototype.unshift = function(/*...values*/) {\n      return this.push.apply(this, arguments);\n    };\n\n    Stack.prototype.unshiftAll = function(iter) {\n      return this.pushAll(iter);\n    };\n\n    Stack.prototype.shift = function() {\n      return this.pop.apply(this, arguments);\n    };\n\n    Stack.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function(fn, reverse) {\n      if (reverse) {\n        return this.reverse().__iterate(fn);\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function(type, reverse) {\n      if (reverse) {\n        return this.reverse().__iterator(type);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function()  {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n        isKeyed(this) ? this.toKeyedSeq() :\n        this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findEntry: function(predicate, context, notSetValue) {\n      var found = notSetValue;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    findLastEntry: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.includes(value)});\n    },\n\n    isSuperset: function(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n      return iter.isSubset(this);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    }\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n  IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n  IterablePrototype.contains = IterablePrototype.includes;\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n        this.toSeq().map(\n          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n        ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n        this.toSeq().flip().map(\n          function(k, v)  {return mapper.call(context, k, v, this$0)}\n        ).flip()\n      );\n    }\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      var key = this.lastKeyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1 ?\n          spliced :\n          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var entry = this.findLastEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n          (this.size !== undefined && index > this.size))) ?\n        notSetValue :\n        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n        this.size === Infinity || index < this.size :\n        this.indexOf(index) !== -1\n      );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    keySeq: function() {\n      return Range(0, this.size);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    }\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    }\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.includes;\n  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n      keyed ?\n        ordered ?\n          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n        ordered ?\n          function(v ) { h = 31 * h + hash(v) | 0; } :\n          function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xCC9E2D51);\n    h = imul(h << 15 | h >>> -15, 0x1B873593);\n    h = imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS\n\n  };\n\n  return Immutable;\n\n}));\n\n\n// WEBPACK FOOTER //\n// ./~/immutable/dist/immutable.js","module.exports = require(\"draft-js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"draft-js\"\n// module id = 2\n// module chunks = 0","import { OrderedSet, Map } from 'immutable';\n\nconst SPACE = ' ';\nconst MAX_DEPTH = 4;\n\nconst getWhitespaceChunk = (entityId: ?string): Object => {\n  return {\n    text: SPACE,\n    inlines: [new OrderedSet()],\n    entities: [entityId],\n    blocks: [],\n  };\n};\n\nconst createTextChunk = (node: Object, inlineStyle: OrderedSet, entityId: number): Object => {\n  const text = node.textContent;\n  if (text.trim() === '') {\n    return { chunk: getWhitespaceChunk(entityId) };\n  }\n  return {\n    chunk: {\n      text,\n      inlines: Array(text.length).fill(inlineStyle),\n      entities: Array(text.length).fill(entityId),\n      blocks: [],\n    },\n  };\n};\n\nconst getSoftNewlineChunk = (): Object => {\n  return {\n    text: '\\n',\n    inlines: [new OrderedSet()],\n    entities: new Array(1),\n    blocks: [],\n  };\n};\n\nconst getEmptyChunk = (): Object => {\n  return {\n    text: '',\n    inlines: [],\n    entities: [],\n    blocks: [],\n  };\n};\n\nconst getFirstBlockChunk = (blockType: string, data: Object): Object => {\n  return {\n    text: '',\n    inlines: [],\n    entities: [],\n    blocks: [{\n      type: blockType,\n      depth: 0,\n      data: data || new Map({}),\n    }],\n  };\n};\n\nconst getBlockDividerChunk = (blockType: string, depth: number, data: Object): Object => {\n  return {\n    text: '\\r',\n    inlines: [],\n    entities: [],\n    blocks: [{\n      type: blockType,\n      depth: Math.max(0, Math.min(MAX_DEPTH, depth)),\n      data: data || new Map({}),\n    }],\n  };\n};\n\nconst getAtomicBlockChunk = (entityId: number): Object => {\n  return {\n    text: '\\r ',\n    inlines: [new OrderedSet()],\n    entities: [entityId],\n    blocks: [{\n      type: 'atomic',\n      depth: 0,\n      data: {}\n    }],\n  };\n};\n\nconst joinChunks = (A: Object, B: Object): Object => {\n  return {\n    text: A.text + B.text,\n    inlines: A.inlines.concat(B.inlines),\n    entities: A.entities.concat(B.entities),\n    blocks: A.blocks.concat(B.blocks),\n  };\n}\n\nmodule.exports = {\n  createTextChunk,\n  getWhitespaceChunk,\n  getSoftNewlineChunk,\n  getEmptyChunk,\n  getBlockDividerChunk,\n  getFirstBlockChunk,\n  getAtomicBlockChunk,\n  joinChunks,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/library/chunkBuilder.js","import { Map } from 'immutable';\n\nexport default function getBlockData(\n  node: Object\n): Object {\n  if (node.style.textAlign) {\n    return new Map({\n      'text-align': node.style.textAlign,\n    })\n  }\n  return undefined;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/library/getBlockData.js","import { Map } from 'immutable';\n\nconst blockRenderMap = new Map({\n  'header-one': {\n    element: 'h1',\n  },\n  'header-two': {\n    element: 'h2',\n  },\n  'header-three': {\n    element: 'h3',\n  },\n  'header-four': {\n    element: 'h4',\n  },\n  'header-five': {\n    element: 'h5',\n  },\n  'header-six': {\n    element: 'h6',\n  },\n  'unordered-list-item': {\n    element: 'li',\n    wrapper: 'ul',\n  },\n  'ordered-list-item': {\n    element: 'li',\n    wrapper: 'ol',\n  },\n  blockquote: {\n    element: 'blockquote',\n  },\n  atomic: {\n    element: 'figure',\n  },\n  unstyled: {\n    element: 'p',\n  },\n});\n\nexport default function getBlockTypeForTag(\n  tag: string,\n  lastList: ?string\n): Object {\n  const matchedTypes = blockRenderMap\n    .filter(draftBlock => {\n      return (\n      (draftBlock.element === tag &&\n      (!draftBlock.wrapper || draftBlock.wrapper === lastList)) ||\n      draftBlock.wrapper === tag\n    )})\n    .keySeq()\n    .toSet()\n    .toArray();\n\n  if (matchedTypes.length === 1) {\n    return matchedTypes[0];\n  }\n  return undefined;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/library/getBlockTypeForTag.js","import { Entity } from 'draft-js';\n\nconst getEntityId = (node) => {\n  let entityId = undefined;\n  if (\n    node instanceof HTMLAnchorElement\n  ) {\n    const entityConfig = {};\n    if (node.dataset.mention !== undefined) {\n      entityConfig.url = node.href;\n      entityConfig.text = node.innerHTML;\n      entityConfig.value = node.dataset.value;\n      entityId = Entity.create(\n        'MENTION',\n        'IMMUTABLE',\n        entityConfig,\n      );\n    } else {\n      entityConfig.url = node.href;\n      entityConfig.title = node.innerHTML;\n      entityId = Entity.create(\n        'LINK',\n        'MUTABLE',\n        entityConfig,\n      );\n    }\n  }\n  return entityId;\n}\n\nmodule.exports = getEntityId;\n\n\n\n// WEBPACK FOOTER //\n// ./src/library/getEntityId.js","const getSafeBodyFromHTML = (html: string): ?Element => {\n  var doc;\n  var root = null;\n  if (\n    document.implementation &&\n    document.implementation.createHTMLDocument\n  ) {\n    doc = document.implementation.createHTMLDocument('foo');\n    doc.documentElement.innerHTML = html;\n    root = doc.getElementsByTagName('body')[0];\n  }\n  return root;\n}\n\nmodule.exports = getSafeBodyFromHTML;\n\n\n\n// WEBPACK FOOTER //\n// ./src/library/getSafeBodyFromHTML.js","/* @flow */\n\nimport { CharacterMetadata, ContentBlock, genKey, Entity } from 'draft-js';\nimport { List, OrderedMap, OrderedSet } from 'immutable';\nimport getSafeBodyFromHTML from './getSafeBodyFromHTML';\nimport {\n  createTextChunk,\n  getSoftNewlineChunk,\n  getEmptyChunk,\n  getBlockDividerChunk,\n  getFirstBlockChunk,\n  getAtomicBlockChunk,\n  joinChunks,\n} from './chunkBuilder';\nimport getBlockTypeForTag from './getBlockTypeForTag';\nimport processInlineTag from './processInlineTag';\nimport getBlockData from './getBlockData';\nimport getEntityId from './getEntityId';\n\nconst SPACE = ' ';\nconst REGEX_NBSP = new RegExp('&nbsp;', 'g');\n\nlet firstBlock = true;\n\nfunction genFragment(\n  node: Object,\n  inlineStyle: OrderedSet,\n  depth: number,\n  lastList: string,\n  inEntity: number\n): Object {\n  const nodeName = node.nodeName.toLowerCase();\n\n  if (nodeName === '#text' && node.textContent !== '\\n') {\n    return createTextChunk(node, inlineStyle, inEntity);\n  }\n\n  if (nodeName === 'br') {\n    return { chunk: getSoftNewlineChunk() };\n  }\n\n  if (\n    nodeName === 'img' &&\n    node instanceof HTMLImageElement\n  ) {\n    const entityConfig = {};\n    entityConfig.src = node.src;\n    entityConfig.height = node.style.height;\n    entityConfig.width = node.style.width;\n    const entityId = Entity.create(\n      'IMAGE',\n      'MUTABLE',\n      entityConfig,\n    );\n    return { chunk: getAtomicBlockChunk(entityId) };\n  }\n\n  if (\n    nodeName === 'iframe' &&\n    node instanceof HTMLIFrameElement\n  ) {\n    const entityConfig = {};\n    entityConfig.src = node.src;\n    entityConfig.height = node.height;\n    entityConfig.width = node.width;\n    const entityId = Entity.create(\n      'EMBEDDED_LINK',\n      'MUTABLE',\n      entityConfig,\n    );\n    return { chunk: getAtomicBlockChunk(entityId) };\n  }\n\n  const blockType = getBlockTypeForTag(nodeName, lastList);\n\n  let chunk;\n  if (blockType) {\n    if (nodeName === 'ul' || nodeName === 'ol') {\n      lastList = nodeName;\n      depth += 1;\n    } else {\n      if (\n         blockType !== 'unordered-list-item' &&\n         blockType !== 'ordered-list-item'\n       ) {\n         lastList = '';\n         depth = -1;\n       }\n       if (!firstBlock) {\n         chunk = getBlockDividerChunk(\n           blockType,\n           depth,\n           getBlockData(node)\n         );\n       } else {\n         chunk = getFirstBlockChunk(\n           blockType,\n           getBlockData(node)\n         );\n         firstBlock = false;\n       }\n    }\n  }\n  if (!chunk) {\n    chunk = getEmptyChunk();\n  }\n\n  inlineStyle = processInlineTag(nodeName, node, inlineStyle);\n\n  let child = node.firstChild;\n  while (child) {\n    const entityId = getEntityId(child);\n    const { chunk: generatedChunk } = genFragment(child, inlineStyle, depth, lastList, (entityId || inEntity));\n    chunk = joinChunks(chunk, generatedChunk);\n    const sibling = child.nextSibling;\n    child = sibling;\n  }\n\n  return { chunk };\n}\n\nfunction getChunkForHTML(html: string): Object {\n  const sanitizedHtml = html.trim().replace(REGEX_NBSP, SPACE);\n  const safeBody = getSafeBodyFromHTML(sanitizedHtml);\n  if (!safeBody) {\n    return null;\n  }\n  firstBlock = true;\n  const { chunk } = genFragment(safeBody, new OrderedSet(), -1, '', undefined);\n  return { chunk };\n}\n\nexport default function htmlToDraft(html: string): Object {\n  const chunkData = getChunkForHTML(html);\n  if (chunkData) {\n    const { chunk } = chunkData;\n    let entityMap = new OrderedMap({});\n    // chunk.entities && chunk.entities.forEach(entity => {\n    //   entityMap = entityMap.set(entity, Entity.get(entity));\n    // });\n    let start = 0;\n    return {\n      contentBlocks: chunk.text.split('\\r')\n      .map(\n        (textBlock, ii) => {\n          const end = start + textBlock.length;\n          const inlines = chunk && chunk.inlines.slice(start, end);\n          const entities = chunk && chunk.entities.slice(start, end);\n          const characterList = new List(\n            inlines.map((style, index) => {\n              const data = { style, entity: null };\n              if (entities[index]) {\n                data.entity = entities[index];\n              }\n              return CharacterMetadata.create(data);\n            }),\n          );\n          start = end;\n          return new ContentBlock({\n            key: genKey(),\n            type: chunk && chunk.blocks[ii].type,\n            depth: chunk && chunk.blocks[ii].depth,\n            data: chunk && chunk.blocks[ii].data,\n            text: textBlock,\n            characterList,\n          });\n        },\n      ),\n      entityMap,\n    };\n    return null;\n  }\n  return null;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/library/index.js","const inlineTags = {\n  code: 'CODE',\n  del: 'STRIKETHROUGH',\n  em: 'ITALIC',\n  strong: 'BOLD',\n  ins: 'UNDERLINE',\n  sub: 'SUBSCRIPT',\n  sup: 'SUPERSCRIPT',\n};\n\nexport default function processInlineTag(\n  tag: string,\n  node: Object,\n  currentStyle: Object\n): Object {\n  const styleToCheck = inlineTags[tag];\n  let inlineStyle;\n  if (styleToCheck) {\n    inlineStyle = currentStyle.add(styleToCheck).toOrderedSet();\n  } else if (node instanceof HTMLElement) {\n    inlineStyle = currentStyle;\n    const htmlElement = node;\n    inlineStyle = inlineStyle.withMutations((style) => {\n      const color = htmlElement.style.color;\n      const backgroundColor = htmlElement.style.backgroundColor;\n      const fontSize = htmlElement.style.fontSize;\n      const fontFamily = htmlElement.style.fontFamily;\n      if (color) {\n        style.add(`color-${color.replace(/ /g, '')}`);\n      }\n      if (backgroundColor) {\n        style.add(`bgcolor-${backgroundColor.replace(/ /g, '')}`);\n      }\n      if (fontSize) {\n        style.add(`fontsize-${fontSize.substr(0, fontSize.length - 2)}`);\n      }\n      if (fontFamily) {\n        style.add(`fontfamily-${fontFamily}`);\n      }\n    }).toOrderedSet();\n  }\n  return inlineStyle;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/library/processInlineTag.js"],"sourceRoot":""}